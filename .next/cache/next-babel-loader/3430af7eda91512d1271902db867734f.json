{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\"; // import { useDispatch } from \"react-redux\";\n\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction usePost() {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(),\n      error = _useState2[0],\n      setError = _useState2[1]; //   const dispatch = useDispatch();\n\n\n  var postSave = function postSave() {\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      success: function success(response) {},\n      fail: function fail(error) {},\n      \"finally\": function _finally() {}\n    };\n    setLoading(true);\n    var token = localStorage.getItem(\"rjt\");\n    axios.patch(\"http://\".concat(BASE_URL, \"/posts/\").concat(code), {\n      json: _JSON$stringify(params)\n    }, {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(function (res) {\n      options.success && options.success(res);\n    })[\"catch\"](function (error) {\n      options.fail && options.fail(error);\n      setError(error);\n    })[\"finally\"](function () {\n      options[\"finally\"] && options[\"finally\"]();\n      setLoading(false);\n    });\n  };\n\n  var postDelete = function postDelete() {\n    var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      success: function success(response) {},\n      fail: function fail(error) {},\n      \"finally\": function _finally() {}\n    };\n    setLoading(true);\n    var token = localStorage.getItem(\"rjt\");\n    axios[\"delete\"](\"http://\".concat(BASE_URL, \"/posts/\").concat(code), {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(function (res) {\n      options.success && options.success(res);\n    })[\"catch\"](function (error) {\n      options.fail && options.fail(error);\n      setError(error);\n    })[\"finally\"](function () {\n      options[\"finally\"] && options[\"finally\"]();\n      setLoading(false);\n    });\n  };\n\n  var posting = function posting() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      success: function success() {},\n      fail: function fail() {},\n      \"finally\": function _finally() {}\n    };\n    setLoading(true);\n    var token = localStorage.getItem(\"rjt\");\n    axios.post(\"http://\".concat(BASE_URL, \"/posting\"), {\n      json: _JSON$stringify(params)\n    }, {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(function (res) {\n      options.success && options.success(res); // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    })[\"catch\"](function (error) {\n      console.log(error);\n      setError(error);\n      options.fail && options.fail(error);\n    })[\"finally\"](function () {\n      setLoading(false);\n      options[\"finally\"] && options[\"finally\"]();\n    });\n  };\n\n  return {\n    postSave: postSave,\n    postDelete: postDelete,\n    posting: posting,\n    loading: loading,\n    error: error\n  };\n}\n\nusePost.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\nexport default usePost;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/usePost.js"],"names":["useState","PropTypes","axios","BASE_URL","API_TIME_OUT","usePost","loading","setLoading","error","setError","postSave","code","params","options","success","response","fail","token","localStorage","getItem","patch","json","timeout","headers","then","res","postDelete","posting","post","console","log","propTypes","tableName","string","isRequired","id","any"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n// import { useDispatch } from \"react-redux\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction usePost() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  //   const dispatch = useDispatch();\n\n  const postSave = (\n    code = \"\",\n    params = {},\n    options = { success: response => {}, fail: error => {}, finally: () => {} }\n  ) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .patch(\n        `http://${BASE_URL}/posts/${code}`,\n        { json: JSON.stringify(params) },\n        {\n          timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n          headers: {\n            \"x-api-key\": token\n          }\n        }\n      )\n      .then(res => {\n        options.success && options.success(res);\n      })\n      .catch(error => {\n        options.fail && options.fail(error);\n        setError(error);\n      })\n      .finally(() => {\n        options.finally && options.finally();\n        setLoading(false);\n      });\n  };\n\n  const postDelete = (\n    code = \"\",\n    options = { success: response => {}, fail: error => {}, finally: () => {} }\n  ) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .delete(`http://${BASE_URL}/posts/${code}`, {\n        timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n        headers: {\n          \"x-api-key\": token\n        }\n      })\n      .then(res => {\n        options.success && options.success(res);\n      })\n      .catch(error => {\n        options.fail && options.fail(error);\n        setError(error);\n      })\n      .finally(() => {\n        options.finally && options.finally();\n        setLoading(false);\n      });\n  };\n  const posting = (\n    params = {},\n    options = { success: () => {}, fail: () => {}, finally: () => {} }\n  ) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .post(\n        `http://${BASE_URL}/posting`,\n        { json: JSON.stringify(params) },\n        {\n          timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n          headers: {\n            \"x-api-key\": token\n          }\n        }\n      )\n      .then(res => {\n        options.success && options.success(res);\n        // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n      })\n      .catch(error => {\n        console.log(error);\n        setError(error);\n        options.fail && options.fail(error);\n      })\n      .finally(() => {\n        setLoading(false);\n        options.finally && options.finally();\n      });\n  };\n\n  return { postSave, postDelete, posting, loading, error };\n}\n\nusePost.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n\nexport default usePost;\n"]},"metadata":{},"sourceType":"module"}