{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { TAGS_SET_REQUEST, TAGS_SET_SUCCESS, TAGS_SET_FAILURE } from \"../actions/types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { set_loading } from \"./utilsinfo\";\n\nfunction getAPI(requset) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/home/\").concat(requset), {\n    params: {},\n    headers: {\n      // 요청 헤더\n      \"X-Api-Key\": \"my-api-key\"\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nvar initialState = {\n  tagsByDisease: [],\n  tagsByDepartment: []\n};\nexport var tags_set = function tags_set() {\n  return function (dispatch, getState) {\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: TAGS_SET_REQUEST\n    });\n    getAPI(\"tagsByDisease\").then(function (response1) {\n      getAPI(\"tagsByDepartment\").then(function (response2) {\n        var data = response1.data;\n        var data2 = response2.data;\n        dispatch({\n          type: TAGS_SET_SUCCESS,\n          payload: {\n            items1: data,\n            items2: data2\n          }\n        });\n        set_loading(false)(dispatch, getState);\n      });\n    })[\"catch\"](function (err) {\n      // console.error(TAGS_SET_FAILURE, err);\n      dispatch({\n        type: TAGS_SET_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    });\n  };\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TAGS_SET_SUCCESS:\n      return _objectSpread({}, state, {\n        tagsByDisease: action.payload.items1.map(function (x) {\n          return x;\n        }),\n        tagsByDepartment: action.payload.items2.map(function (x) {\n          return x;\n        })\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/homeinfo.js"],"names":["TAGS_SET_REQUEST","TAGS_SET_SUCCESS","TAGS_SET_FAILURE","axios","BASE_URL","API_TIME_OUT","set_loading","getAPI","requset","get","params","headers","timeout","initialState","tagsByDisease","tagsByDepartment","tags_set","dispatch","getState","type","then","response1","response2","data","data2","payload","items1","items2","err","state","action","map","x"],"mappings":";AAAA,SACIA,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,kBAJP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACrB,SAAOL,KAAK,CAACM,GAAN,mBAAqBL,QAArB,mBAAsCI,OAAtC,GAAiD;AACpDE,IAAAA,MAAM,EAAE,EAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACL;AACA,mBAAa;AAFR,KAF2C;AAMpDC,IAAAA,OAAO,EAAEP,YAAY,GAAG,CAN4B,CAM1B;;AAN0B,GAAjD,CAAP;AAQH;;AACD,IAAMQ,YAAY,GAAG;AAAEC,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,gBAAgB,EAAE;AAAvC,CAArB;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC1B,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3BZ,IAAAA,WAAW,CAAC,IAAD,CAAX,CAAkBW,QAAlB,EAA4BC,QAA5B;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB;AADD,KAAD,CAAR;AAGAO,IAAAA,MAAM,CAAC,eAAD,CAAN,CACKa,IADL,CACU,UAAAC,SAAS,EAAI;AACfd,MAAAA,MAAM,CAAC,kBAAD,CAAN,CAA2Ba,IAA3B,CAAgC,UAAAE,SAAS,EAAI;AACzC,YAAMC,IAAI,GAAGF,SAAS,CAACE,IAAvB;AACA,YAAMC,KAAK,GAAGF,SAAS,CAACC,IAAxB;AACAN,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAElB,gBADD;AAELwB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,MAAM,EAAEH,IAAV;AAAgBI,YAAAA,MAAM,EAAEH;AAAxB;AAFJ,SAAD,CAAR;AAIAlB,QAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBW,QAAnB,EAA6BC,QAA7B;AACH,OARD;AASH,KAXL,WAYW,UAAAU,GAAG,EAAI;AACV;AACAX,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEjB;AADD,OAAD,CAAR;AAGAI,MAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBW,QAAnB,EAA6BC,QAA7B;AACH,KAlBL;AAmBH,GAxBD;AAyBH,CA1BM;AA2BP,gBAAe,YAAkC;AAAA,MAAjCW,KAAiC,uEAAzBhB,YAAyB;AAAA,MAAXiB,MAAW;;AAC7C,UAAQA,MAAM,CAACX,IAAf;AACI,SAAKlB,gBAAL;AACI,+BACO4B,KADP;AAEIf,QAAAA,aAAa,EAAEgB,MAAM,CAACL,OAAP,CAAeC,MAAf,CAAsBK,GAAtB,CAA0B,UAAAC,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAA3B,CAFnB;AAGIjB,QAAAA,gBAAgB,EAAEe,MAAM,CAACL,OAAP,CAAeE,MAAf,CAAsBI,GAAtB,CAA0B,UAAAC,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAA3B;AAHtB;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD","sourcesContent":["import {\n    TAGS_SET_REQUEST,\n    TAGS_SET_SUCCESS,\n    TAGS_SET_FAILURE\n} from \"../actions/types\";\n\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { set_loading } from \"./utilsinfo\";\n\nfunction getAPI(requset) {\n    return axios.get(`https://${BASE_URL}/home/${requset}`, {\n        params: {},\n        headers: {\n            // 요청 헤더\n            \"X-Api-Key\": \"my-api-key\"\n        },\n        timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nconst initialState = { tagsByDisease: [], tagsByDepartment: [] };\nexport const tags_set = () => {\n    return (dispatch, getState) => {\n        set_loading(true)(dispatch, getState);\n        dispatch({\n            type: TAGS_SET_REQUEST\n        });\n        getAPI(\"tagsByDisease\")\n            .then(response1 => {\n                getAPI(\"tagsByDepartment\").then(response2 => {\n                    const data = response1.data;\n                    const data2 = response2.data;\n                    dispatch({\n                        type: TAGS_SET_SUCCESS,\n                        payload: { items1: data, items2: data2 }\n                    });\n                    set_loading(false)(dispatch, getState);\n                });\n            })\n            .catch(err => {\n                // console.error(TAGS_SET_FAILURE, err);\n                dispatch({\n                    type: TAGS_SET_FAILURE\n                });\n                set_loading(false)(dispatch, getState);\n            });\n    };\n};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TAGS_SET_SUCCESS:\n            return {\n                ...state,\n                tagsByDisease: action.payload.items1.map(x => x),\n                tagsByDepartment: action.payload.items2.map(x => x)\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}