{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport window from \"global\";\n\nvar parseDeci = function parseDeci() {\n  var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return _parseInt(num, 10);\n}; // viewportResponsiveBaseFontSize 계산을 위한 상수. 어떤 값을 사용해도 상관없다.\n\n\nvar BASE_FONT_SIZE = \"16px\"; // 디자인에서 제시한 앱 사이즈. pTr 계산에는 디자인에 제시한 사이즈를 기준으로 해야 한다.\n\nexport var BASE_APP_SIZE = \"375px\";\nexport var BASE_APP_HEIGHT = \"812px\";\nexport var BASE_COLOR = \"rgb(0 49 82)\"; // lightpuple\n// export const BASE_COLOR = \"rgb(174 87 251)\";\n\n/**\n * 모바일에서는 뷰포트 넓이에 대응해서 폰트 사이즈가 커지도록 한다.\n * html 폰트 사이즈를 vw 단위로 설정한 후, 모든 요소의 사이즈를 rem 단위로 설정하면 크기가 디바이스 크기에\n * 반응해서 커지게 된다.\n * vw 값은 임의로 지정한 가상 베이스 폰트 사이즈와 디자인에서 사용한 앱의 넓이를 사용해서 계산한다.\n * 디자이너가 지정한 앱의 넓이가 414px, 가상 베이스 폰트사이즈가 25px이라면 실제 베이스 폰트사이즈는\n * 100 / 414 * 25 vw 가 된다.\n *\n * 데스크탑 뷰에서는 vw 단위로 베이스 폰트사이즈를 지정하면 앱 요소의 사이즈가 너무 커지기 때문에 vw 대신\n * 가상 베이스폰트 사이즈를 사용하고 앱의 넓이도 디자인의 넓이를 그대로 사용한다.\n */\n// export const VIEWPORT_RESPONSIVE_FONT_SIZE = `100vw`;\n\nexport var VIEWPORT_RESPONSIVE_FONT_SIZE = \"\".concat(parseDeci(BASE_FONT_SIZE) / parseDeci(BASE_APP_SIZE) * 100, \"vw\");\nexport var BASE_LINE_HEIGHT = 1.4;\n/**\n * point(pixel) to rem\n * 가상 베이스 폰트 사이즈를 기준으로 rem 값을 계산한다.\n */\n\nexport var pTr = function pTr() {\n  var pt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  // return `${parseInt(pt) / parseInt(BASE_FONT_SIZE)}rem`;\n  return \"\".concat(pt, \"px\");\n};\nexport var pTx = function pTx() {\n  var px = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  // if (!window) return null;\n  // let width = window.innerWidth < 768 ? window.innerWidth : 768;\n  // return `${px * (width / parseInt(BASE_APP_SIZE))}px`;\n  return \"\".concat(px, \"px\");\n};\nexport var responsiveHeight = function responsiveHeight() {\n  var px = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  // if (!window) return null;\n  // let height = px < window.innerHeight ? px : window.innerHeight;\n  // return `${px * (height / parseInt(BASE_APP_HEIGHT))}px`;\n  return \"\".concat(px, \"px\");\n};\nexport var pInt = function pInt() {\n  var pt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\n  // return parseInt(pt) * (window.innerWidth / parseInt(BASE_APP_SIZE));\n  // return pt;\n  return _parseInt(pt);\n};\nexport var getWindow = function getWindow() {\n  if (!window) return null;\n  return window;\n}; // export const pTr = (pt = 16) => {\n//     return `${parseInt(pt, 10) / parseInt(BASE_FONT_SIZE, 10)}rem`;\n// };\n\nexport default {\n  VIEWPORT_RESPONSIVE_FONT_SIZE: VIEWPORT_RESPONSIVE_FONT_SIZE,\n  BASE_FONT_SIZE: BASE_FONT_SIZE,\n  BASE_LINE_HEIGHT: BASE_LINE_HEIGHT,\n  pTr: pTr\n};","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/styles/typography.js"],"names":["window","parseDeci","num","BASE_FONT_SIZE","BASE_APP_SIZE","BASE_APP_HEIGHT","BASE_COLOR","VIEWPORT_RESPONSIVE_FONT_SIZE","BASE_LINE_HEIGHT","pTr","pt","pTx","px","responsiveHeight","pInt","getWindow"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAc,UAASA,GAAT,EAAc,EAAd,CAAd;AAAA,CAAlB,C,CAEA;;;AACA,IAAMC,cAAc,GAAG,MAAvB,C,CAEA;;AACA,OAAO,IAAMC,aAAa,GAAG,OAAtB;AACP,OAAO,IAAMC,eAAe,GAAG,OAAxB;AACP,OAAO,IAAMC,UAAU,GAAG,cAAnB,C,CACP;AACA;;AAEA;;;;;;;;;;;AAWA;;AAEA,OAAO,IAAMC,6BAA6B,aAAON,SAAS,CAACE,cAAD,CAAT,GAC7CF,SAAS,CAACG,aAAD,CADmC,GAE5C,GAFsC,OAAnC;AAIP,OAAO,IAAMI,gBAAgB,GAAG,GAAzB;AAEP;;;;;AAKA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAa;AAAA,MAAZC,EAAY,uEAAP,EAAO;AAC5B;AACA,mBAAUA,EAAV;AACH,CAHM;AAIP,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAa;AAAA,MAAZC,EAAY,uEAAP,EAAO;AAC5B;AACA;AACA;AACA,mBAAUA,EAAV;AACH,CALM;AAMP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAa;AAAA,MAAZD,EAAY,uEAAP,EAAO;AACzC;AACA;AACA;AACA,mBAAUA,EAAV;AACH,CALM;AAMP,OAAO,IAAME,IAAI,GAAG,SAAPA,IAAO,GAAa;AAAA,MAAZJ,EAAY,uEAAP,EAAO;AAC7B;AACA;AACA,SAAO,UAASA,EAAT,CAAP;AACH,CAJM;AAKP,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3B,MAAI,CAACf,MAAL,EAAa,OAAO,IAAP;AACb,SAAOA,MAAP;AACH,CAHM,C,CAIP;AACA;AACA;;AAEA,eAAe;AACXO,EAAAA,6BAA6B,EAA7BA,6BADW;AAEXJ,EAAAA,cAAc,EAAdA,cAFW;AAGXK,EAAAA,gBAAgB,EAAhBA,gBAHW;AAIXC,EAAAA,GAAG,EAAHA;AAJW,CAAf","sourcesContent":["import window from \"global\";\n\nconst parseDeci = (num = \"\") => parseInt(num, 10);\n\n// viewportResponsiveBaseFontSize 계산을 위한 상수. 어떤 값을 사용해도 상관없다.\nconst BASE_FONT_SIZE = \"16px\";\n\n// 디자인에서 제시한 앱 사이즈. pTr 계산에는 디자인에 제시한 사이즈를 기준으로 해야 한다.\nexport const BASE_APP_SIZE = \"375px\";\nexport const BASE_APP_HEIGHT = \"812px\";\nexport const BASE_COLOR = \"rgb(0 49 82)\";\n// lightpuple\n// export const BASE_COLOR = \"rgb(174 87 251)\";\n\n/**\n * 모바일에서는 뷰포트 넓이에 대응해서 폰트 사이즈가 커지도록 한다.\n * html 폰트 사이즈를 vw 단위로 설정한 후, 모든 요소의 사이즈를 rem 단위로 설정하면 크기가 디바이스 크기에\n * 반응해서 커지게 된다.\n * vw 값은 임의로 지정한 가상 베이스 폰트 사이즈와 디자인에서 사용한 앱의 넓이를 사용해서 계산한다.\n * 디자이너가 지정한 앱의 넓이가 414px, 가상 베이스 폰트사이즈가 25px이라면 실제 베이스 폰트사이즈는\n * 100 / 414 * 25 vw 가 된다.\n *\n * 데스크탑 뷰에서는 vw 단위로 베이스 폰트사이즈를 지정하면 앱 요소의 사이즈가 너무 커지기 때문에 vw 대신\n * 가상 베이스폰트 사이즈를 사용하고 앱의 넓이도 디자인의 넓이를 그대로 사용한다.\n */\n// export const VIEWPORT_RESPONSIVE_FONT_SIZE = `100vw`;\n\nexport const VIEWPORT_RESPONSIVE_FONT_SIZE = `${(parseDeci(BASE_FONT_SIZE) /\n    parseDeci(BASE_APP_SIZE)) *\n    100}vw`;\n\nexport const BASE_LINE_HEIGHT = 1.4;\n\n/**\n * point(pixel) to rem\n * 가상 베이스 폰트 사이즈를 기준으로 rem 값을 계산한다.\n */\n\nexport const pTr = (pt = 16) => {\n    // return `${parseInt(pt) / parseInt(BASE_FONT_SIZE)}rem`;\n    return `${pt}px`;\n};\nexport const pTx = (px = 16) => {\n    // if (!window) return null;\n    // let width = window.innerWidth < 768 ? window.innerWidth : 768;\n    // return `${px * (width / parseInt(BASE_APP_SIZE))}px`;\n    return `${px}px`;\n};\nexport const responsiveHeight = (px = 16) => {\n    // if (!window) return null;\n    // let height = px < window.innerHeight ? px : window.innerHeight;\n    // return `${px * (height / parseInt(BASE_APP_HEIGHT))}px`;\n    return `${px}px`;\n};\nexport const pInt = (pt = 16) => {\n    // return parseInt(pt) * (window.innerWidth / parseInt(BASE_APP_SIZE));\n    // return pt;\n    return parseInt(pt);\n};\nexport const getWindow = () => {\n    if (!window) return null;\n    return window;\n};\n// export const pTr = (pt = 16) => {\n//     return `${parseInt(pt, 10) / parseInt(BASE_FONT_SIZE, 10)}rem`;\n// };\n\nexport default {\n    VIEWPORT_RESPONSIVE_FONT_SIZE,\n    BASE_FONT_SIZE,\n    BASE_LINE_HEIGHT,\n    pTr\n};\n"]},"metadata":{},"sourceType":"module"}