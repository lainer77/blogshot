{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { SELECTED_TAB, SEARCH_REQUEST, SEARCH_REQUEST_SUCCESS, SEARCH_REQUEST_FAILURE, GET_AREA_REQUEST, GET_MEDICAL_DEPARTMENT_REQUEST, GET_MEDICAL_UNIVERSITIE_REQUEST, DOCTOR_FILTER_CLEAR, HOSPITAL_FILTER_CLEAR, FILTER_CLEAR, FILTER_APPLY, SEARCH_AJAX, SET_CNT_TOTAL, SET_SEARCH_TYPE } from \"../actions/types\";\nimport { area_filter_apply, department_filter_apply, universitie_filter_apply, set_doctor_list, remove_doctor_list } from \"./doctorinfo\";\nimport { message_open, set_loading } from \"./utilsinfo\";\nimport { area_filter_apply as hospital_area_filter_apply, set_hospital_list, remove_hospital_list } from \"./hospitalinfo\";\nimport { BASE_URL, API_TIME_OUT, SEARCH_REQUST_RESULT_LIMIT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nconst getAPI = (param = {}, exUrl) => {\n  let params = param; // defalut limit 10\n\n  if (params && !params[\"limit\"]) {\n    params.limit = SEARCH_REQUST_RESULT_LIMIT;\n  }\n\n  return axios.get(`https://${BASE_URL}/search${exUrl ? exUrl : \"\"}`, {\n    params: param,\n    headers: {\n      // 요청 헤더\n      \"X-Api-Key\": \"my-api-key\"\n    },\n    timeout: API_TIME_OUT // 30초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n};\n\nconst searchType = {\n  A: \"질병명\",\n  B: \"의사/병원명\"\n};\nconst initialState = {\n  selected_tab: \"doctor\",\n  search_state: \"wait\",\n  // wait, search, success\n  searchText: \"\",\n  search_path: null,\n  searchType: searchType.A,\n  medical_departments_id: null,\n  cnt_total: 0,\n  is_filter: false,\n  areas: null,\n  departments: null,\n  universities: null,\n  is_local_filter: false\n};\nexport function search_ajax(searchText, searchType, cb) {\n  const exUrl = \"_ajax\";\n  getAPI({\n    searchText,\n    searchType,\n    limit: 10\n  }, exUrl).then(response => {\n    // console.log(SEARCH_AJAX, response);\n    cb(response.data);\n  }).catch(err => {// console.error(SEARCH_AJAX, err);\n  });\n}\nexport function set_selected_tab(text) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: SELECTED_TAB,\n      payload: {\n        selected_tab: text\n      }\n    });\n  };\n}\nexport function set_search_type(text) {\n  sessionStorage.setItem(\"searchType\", text);\n  return (dispatch, getState) => {\n    dispatch({\n      type: SET_SEARCH_TYPE,\n      payload: {\n        searchType: text\n      }\n    });\n  };\n}\nexport function get_area_requset() {\n  const exUrl = \"/filter/areas\";\n  return (dispatch, getState) => {\n    if (!getState().searchinfo.areas) getAPI(null, exUrl).then(response => {\n      // console.log(GET_AREA_REQUEST, response);\n      dispatch({\n        type: GET_AREA_REQUEST,\n        payload: {\n          data: response.data\n        }\n      });\n    }).catch(err => {// console.error(GET_AREA_REQUEST, err);\n    });\n  };\n}\nexport function get_medical_universities_requset() {\n  const exUrl = \"/filter/medical_universities\";\n  return (dispatch, getState) => {\n    if (!getState().searchinfo.universities) getAPI(null, exUrl).then(response => {\n      // console.log(GET_MEDICAL_UNIVERSITIE_REQUEST, response);\n      dispatch({\n        type: GET_MEDICAL_UNIVERSITIE_REQUEST,\n        payload: {\n          data: response.data\n        }\n      });\n    }).catch(err => {// console.error(GET_MEDICAL_UNIVERSITIE_REQUEST, err);\n    });\n  };\n}\nexport function get_medical_departments_requset() {\n  const exUrl = \"/filter/medical_departments\";\n  return (dispatch, getState) => {\n    if (!getState().searchinfo.departments) getAPI(null, exUrl).then(response => {\n      // console.log(GET_MEDICAL_DEPARTMENT_REQUEST, response);\n      dispatch({\n        type: GET_MEDICAL_DEPARTMENT_REQUEST,\n        payload: {\n          data: response.data\n        }\n      });\n    }).catch(err => {// console.error(GET_MEDICAL_DEPARTMENT_REQUEST, err);\n    });\n  };\n}\nexport function search_requset(param, is_useFilter, filterParams) {\n  return (dispatch, getState) => {\n    let params = {};\n    let keys = [\"searchText\", \"medical_departments_id\", \"medical_universities_id\", \"areas_id\", \"offset\", \"limit\", \"searchType\"];\n    keys.map(x => {\n      if (param[x]) {\n        params[x] = param[x];\n      }\n    });\n\n    if (!params.searchType) {\n      if (params.searchText) {\n        if (params.areas_id) {\n          params.searchType = searchType.B;\n          params.searchText = undefined;\n        } else params.searchType = sessionStorage.getItem(\"searchType\") || getState().searchinfo.searchType;\n      } else if (params.medical_departments_id) params.searchType = searchType.B;\n    }\n\n    set_search_type(params.searchType); // loading start\n\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: DOCTOR_FILTER_CLEAR\n    });\n    dispatch({\n      type: HOSPITAL_FILTER_CLEAR\n    });\n    dispatch({\n      type: FILTER_CLEAR\n    });\n    if (params.searchText && params.medical_departments_id) dispatch({\n      type: SEARCH_REQUEST,\n      payload: {\n        searchText: params.searchText,\n        medical_departments_id: params.medical_departments_id,\n        searchType: params.searchType,\n        search_state: \"search\"\n      }\n    });else if (params.searchText) dispatch({\n      type: SEARCH_REQUEST,\n      payload: {\n        searchText: params.searchText,\n        medical_departments_id: null,\n        searchType: params.searchType,\n        search_state: \"search\"\n      }\n    });else if (params.medical_departments_id) dispatch({\n      type: SEARCH_REQUEST,\n      payload: {\n        medical_departments_id: params.medical_departments_id,\n        searchText: \"\",\n        searchType: params.searchType,\n        search_state: \"search\"\n      }\n    });\n    getAPI(params).then(response => {\n      // console.log(SEARCH_REQUEST_SUCCESS, response);\n      dispatch({\n        type: SEARCH_REQUEST_SUCCESS,\n        payload: {\n          cnt_total: response.data.cnt_total,\n          search_path: response.data.search_path\n        }\n      });\n      remove_doctor_list()(dispatch, getState);\n      remove_hospital_list()(dispatch, getState);\n\n      if (response.data.cnt_total == 0 || response.data.cnt_total == \"0\") {\n        // set_loading(false)(dispatch, getState);\n        message_open()(dispatch, getState);\n      }\n\n      if (response.data.list_doctor) {\n        set_doctor_list(response)(dispatch, getState);\n      }\n\n      if (response.data.list_hospital) {\n        set_hospital_list(response)(dispatch, getState);\n      }\n\n      if (is_useFilter) {\n        if (filterParams) dispatch({\n          type: FILTER_APPLY\n        });\n        setTimeout(getState => {\n          if (getState().searchinfo.is_filter) {\n            message_open()(dispatch, getState); // set_loading(false)(dispatch, getState);\n          }\n        }, 1500, getState);\n      }\n\n      set_loading(false)(dispatch, getState);\n    }).catch(err => {\n      dispatch({\n        type: SEARCH_REQUEST_FAILURE\n      });\n\n      if (err.response && err.response.status && err.response.status === 500) {\n        remove_doctor_list()(dispatch);\n        remove_hospital_list()(dispatch);\n      }\n\n      set_loading(false)(dispatch, getState);\n    });\n    setTimeout(getState => {\n      if (getState().utilsinfo.loading) {\n        set_loading(false)(dispatch, getState);\n      }\n    }, 30000, getState);\n  };\n}\nexport function search_more_requset(options) {\n  return (dispatch, getState) => {\n    set_loading(true)(dispatch, getState);\n    let params = options || {};\n    let selected_tab = getState().searchinfo.selected_tab;\n    let searchType = sessionStorage.getItem(\"searchType\");\n    let keys = [\"searchText\", \"medical_departments_id\"];\n    keys.map(x => {\n      if (getState().searchinfo[x]) {\n        params[x] = getState().searchinfo[x];\n      }\n    });\n\n    if (!params.offset && getState()[selected_tab + \"info\"] && getState()[selected_tab + \"info\"].offset) {\n      params.offset = getState()[selected_tab + \"info\"].offset;\n    }\n\n    if (Router.query.areas_id) {\n      params.areas_id = Router.query.areas_id;\n      params.searchText = undefined;\n      params.medical_departments_id = undefined;\n    }\n\n    if (params.searchText) dispatch({\n      type: SEARCH_REQUEST,\n      payload: {\n        searchText: params.searchText,\n        searchType,\n        search_state: \"more\"\n      }\n    });\n    if (params.medical_departments_id) dispatch({\n      type: SEARCH_REQUEST,\n      payload: {\n        medical_departments_id: params.medical_departments_id,\n        searchType,\n        search_state: \"more\"\n      }\n    });\n\n    if (!params.searchType) {\n      params.searchType = searchType;\n    } // loading start use not\n    // set_loading(true)(dispatch, getState);\n\n\n    getAPI(params).then(response => {\n      // console.log(SEARCH_REQUEST_SUCCESS, response);\n      dispatch({\n        type: SEARCH_REQUEST_SUCCESS,\n        payload: {\n          cnt_total: response.data.cnt_total\n        }\n      });\n\n      if (selected_tab === \"doctor\" && response.data.list_doctor) {\n        set_doctor_list(response, true)(dispatch, getState);\n      }\n\n      if (selected_tab === \"hospital\" && response.data.list_hospital) set_hospital_list(response, true)(dispatch, getState);\n      set_loading(false)(dispatch, getState);\n    }).catch(err => {\n      // console.error(SEARCH_REQUEST_FAILURE, err);\n      dispatch({\n        type: SEARCH_REQUEST_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    });\n    setTimeout(getState => {\n      if (getState().utilsinfo.loading) {\n        set_loading(false)(dispatch, getState);\n      }\n    }, 30000, getState);\n  };\n}\nexport function filter_apply(param) {\n  return (dispatch, getState) => {\n    let params = param; // let doctor_isfilter = getState().doctorinfo.is_filter;\n    // doctor_isfilter =\n    //     doctor_isfilter.area ||\n    //     doctor_isfilter.department ||\n    //     doctor_isfilter.universitie;\n    // const hospital_isfilter = getState().hospitalinfo.is_filter.area;\n\n    const selected_tab = getState().searchinfo.selected_tab; // if (doctor_isfilter || hospital_isfilter) {\n    //     if (doctor_isfilter) dispatch({ type: DOCTOR_FILTER_CLEAR });\n    //     if (hospital_isfilter) dispatch({ type: HOSPITAL_FILTER_CLEAR });\n    //     dispatch({\n    //         type: FILTER_CLEAR\n    //     });\n    // }\n\n    let is_filter_docter = false;\n    let is_filter_hospital = false;\n\n    if (selected_tab == \"doctor\") {\n      if (params.area) {\n        area_filter_apply(params.area)(dispatch, getState);\n        is_filter_docter = true;\n      }\n\n      if (params.department.depth1 || params.department.depth2) {\n        department_filter_apply(params.department)(dispatch, getState);\n        is_filter_docter = true;\n      }\n\n      if (params.universitie) {\n        universitie_filter_apply(params.universitie)(dispatch, getState);\n        is_filter_docter = true;\n      }\n    } else {\n      if (params.area) {\n        {\n          hospital_area_filter_apply(params.area)(dispatch, getState);\n          is_filter_hospital = true;\n        }\n      }\n    } // let cnt_total = 0;\n\n\n    if (is_filter_docter || is_filter_hospital) {\n      // if (is_filter_docter)\n      //     cnt_total += getState().doctorinfo.cnt_doctor_filter;\n      // else cnt_total += getState().doctorinfo.cnt_doctor;\n      // if (is_filter_hospital)\n      //     cnt_total =\n      //         cnt_total + getState().hospitalinfo.cnt_hospital_filter;\n      // else cnt_total += getState().hospitalinfo.cnt_hospital;\n      dispatch({\n        type: FILTER_APPLY // payload: {\n        //     cnt_total: cnt_total\n        // }\n\n      });\n      filter_apply_success(dispatch, getState);\n    }\n  };\n}\nexport function filter_free() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: DOCTOR_FILTER_CLEAR\n    });\n    dispatch({\n      type: HOSPITAL_FILTER_CLEAR\n    });\n    dispatch({\n      type: FILTER_CLEAR,\n      payload: {\n        cnt_total: getState().hospitalinfo.cnt_hospital + getState().doctorinfo.cnt_doctor\n      }\n    });\n    filter_free_success(dispatch, getState);\n  };\n}\n\nconst filter_free_success = (dispatch, getState) => {\n  message_open()(dispatch, getState);\n};\n\nconst filter_apply_success = (dispatch, getState) => {\n  message_open()(dispatch, getState);\n};\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SELECTED_TAB:\n      return _objectSpread({}, state, {\n        selected_tab: action.payload.selected_tab != undefined ? action.payload.selected_tab : \"doctor\"\n      });\n\n    case GET_AREA_REQUEST:\n      return _objectSpread({}, state, {\n        areas: action.payload.data\n      });\n\n    case GET_MEDICAL_DEPARTMENT_REQUEST:\n      return _objectSpread({}, state, {\n        departments: action.payload.data\n      });\n\n    case GET_MEDICAL_UNIVERSITIE_REQUEST:\n      return _objectSpread({}, state, {\n        universities: action.payload.data\n      });\n\n    case SEARCH_REQUEST:\n      if (action.payload.medical_departments_id) return _objectSpread({}, state, {\n        medical_departments_id: action.payload.medical_departments_id,\n        searchText: action.payload.searchText,\n        searchType: action.payload.searchType,\n        search_state: action.payload.search_state || \"search\"\n      });\n      if (action.payload.searchText) return _objectSpread({}, state, {\n        medical_departments_id: null,\n        searchText: action.payload.searchText,\n        searchType: action.payload.searchType,\n        search_state: action.payload.search_state || \"search\"\n      });\n\n    case SEARCH_REQUEST_SUCCESS:\n      return _objectSpread({}, state, {\n        selected_tab: action.payload.selected_tab != undefined ? action.payload.selected_tab : state.selected_tab != undefined ? state.selected_tab : \"doctor\",\n        cnt_total: action.payload.cnt_total,\n        search_path: action.payload.search_path,\n        search_state: \"success\"\n      });\n\n    case SEARCH_REQUEST_FAILURE:\n      return _objectSpread({}, state, {\n        cnt_total: 0,\n        search_state: \"wait\"\n      });\n\n    case FILTER_CLEAR:\n      return _objectSpread({}, state, {\n        // cnt_total: action.payload.cnt_total,\n        is_filter: false,\n        is_local_filter: false\n      });\n\n    case FILTER_APPLY:\n      return _objectSpread({}, state, {\n        // cnt_total: action.payload.cnt_total,\n        is_filter: true\n      });\n\n    case SET_CNT_TOTAL:\n      return _objectSpread({}, state, {\n        cnt_total: action.payload.cnt_total,\n        is_useFilter: false,\n        is_local_filter: action.payload.is_local_filter !== undefined ? action.payload.is_local_filter : true\n      });\n\n    case SET_SEARCH_TYPE:\n      return _objectSpread({}, state, {\n        searchType: action.payload.searchType\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/searchinfo.js"],"names":["SELECTED_TAB","SEARCH_REQUEST","SEARCH_REQUEST_SUCCESS","SEARCH_REQUEST_FAILURE","GET_AREA_REQUEST","GET_MEDICAL_DEPARTMENT_REQUEST","GET_MEDICAL_UNIVERSITIE_REQUEST","DOCTOR_FILTER_CLEAR","HOSPITAL_FILTER_CLEAR","FILTER_CLEAR","FILTER_APPLY","SEARCH_AJAX","SET_CNT_TOTAL","SET_SEARCH_TYPE","area_filter_apply","department_filter_apply","universitie_filter_apply","set_doctor_list","remove_doctor_list","message_open","set_loading","hospital_area_filter_apply","set_hospital_list","remove_hospital_list","BASE_URL","API_TIME_OUT","SEARCH_REQUST_RESULT_LIMIT","axios","Router","getAPI","param","exUrl","params","limit","get","headers","timeout","searchType","A","B","initialState","selected_tab","search_state","searchText","search_path","medical_departments_id","cnt_total","is_filter","areas","departments","universities","is_local_filter","search_ajax","cb","then","response","data","catch","err","set_selected_tab","text","dispatch","getState","type","payload","set_search_type","sessionStorage","setItem","get_area_requset","searchinfo","get_medical_universities_requset","get_medical_departments_requset","search_requset","is_useFilter","filterParams","keys","map","x","areas_id","undefined","getItem","list_doctor","list_hospital","setTimeout","status","utilsinfo","loading","search_more_requset","options","offset","query","filter_apply","is_filter_docter","is_filter_hospital","area","department","depth1","depth2","universitie","filter_apply_success","filter_free","hospitalinfo","cnt_hospital","doctorinfo","cnt_doctor","filter_free_success","state","action"],"mappings":"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","sourcesContent":["import {\n    SELECTED_TAB,\n    SEARCH_REQUEST,\n    SEARCH_REQUEST_SUCCESS,\n    SEARCH_REQUEST_FAILURE,\n    GET_AREA_REQUEST,\n    GET_MEDICAL_DEPARTMENT_REQUEST,\n    GET_MEDICAL_UNIVERSITIE_REQUEST,\n    DOCTOR_FILTER_CLEAR,\n    HOSPITAL_FILTER_CLEAR,\n    FILTER_CLEAR,\n    FILTER_APPLY,\n    SEARCH_AJAX,\n    SET_CNT_TOTAL,\n    SET_SEARCH_TYPE\n} from \"../actions/types\";\n\nimport {\n    area_filter_apply,\n    department_filter_apply,\n    universitie_filter_apply,\n    set_doctor_list,\n    remove_doctor_list\n} from \"./doctorinfo\";\nimport { message_open, set_loading } from \"./utilsinfo\";\n\nimport {\n    area_filter_apply as hospital_area_filter_apply,\n    set_hospital_list,\n    remove_hospital_list\n} from \"./hospitalinfo\";\nimport {\n    BASE_URL,\n    API_TIME_OUT,\n    SEARCH_REQUST_RESULT_LIMIT\n} from \"../contants/constants\";\n\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nconst getAPI = (param = {}, exUrl) => {\n    let params = param;\n\n    // defalut limit 10\n    if (params && !params[\"limit\"]) {\n        params.limit = SEARCH_REQUST_RESULT_LIMIT;\n    }\n    return axios.get(`https://${BASE_URL}/search${exUrl ? exUrl : \"\"}`, {\n        params: param,\n        headers: {\n            // 요청 헤더\n            \"X-Api-Key\": \"my-api-key\"\n        },\n        timeout: API_TIME_OUT // 30초 이내에 응답이 오지 않으면 에러로 간주\n    });\n};\nconst searchType = {\n    A: \"질병명\",\n    B: \"의사/병원명\"\n};\nconst initialState = {\n    selected_tab: \"doctor\",\n    search_state: \"wait\", // wait, search, success\n    searchText: \"\",\n    search_path: null,\n    searchType: searchType.A,\n    medical_departments_id: null,\n    cnt_total: 0,\n    is_filter: false,\n    areas: null,\n    departments: null,\n    universities: null,\n    is_local_filter: false\n};\n\nexport function search_ajax(searchText, searchType, cb) {\n    const exUrl = \"_ajax\";\n\n    getAPI({ searchText, searchType, limit: 10 }, exUrl)\n        .then(response => {\n            // console.log(SEARCH_AJAX, response);\n            cb(response.data);\n        })\n        .catch(err => {\n            // console.error(SEARCH_AJAX, err);\n        });\n}\nexport function set_selected_tab(text) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: SELECTED_TAB,\n            payload: { selected_tab: text }\n        });\n    };\n}\nexport function set_search_type(text) {\n    sessionStorage.setItem(\"searchType\", text);\n    return (dispatch, getState) => {\n        dispatch({\n            type: SET_SEARCH_TYPE,\n            payload: { searchType: text }\n        });\n    };\n}\n\nexport function get_area_requset() {\n    const exUrl = \"/filter/areas\";\n    return (dispatch, getState) => {\n        if (!getState().searchinfo.areas)\n            getAPI(null, exUrl)\n                .then(response => {\n                    // console.log(GET_AREA_REQUEST, response);\n                    dispatch({\n                        type: GET_AREA_REQUEST,\n                        payload: { data: response.data }\n                    });\n                })\n                .catch(err => {\n                    // console.error(GET_AREA_REQUEST, err);\n                });\n    };\n}\nexport function get_medical_universities_requset() {\n    const exUrl = \"/filter/medical_universities\";\n    return (dispatch, getState) => {\n        if (!getState().searchinfo.universities)\n            getAPI(null, exUrl)\n                .then(response => {\n                    // console.log(GET_MEDICAL_UNIVERSITIE_REQUEST, response);\n                    dispatch({\n                        type: GET_MEDICAL_UNIVERSITIE_REQUEST,\n                        payload: { data: response.data }\n                    });\n                })\n                .catch(err => {\n                    // console.error(GET_MEDICAL_UNIVERSITIE_REQUEST, err);\n                });\n    };\n}\nexport function get_medical_departments_requset() {\n    const exUrl = \"/filter/medical_departments\";\n    return (dispatch, getState) => {\n        if (!getState().searchinfo.departments)\n            getAPI(null, exUrl)\n                .then(response => {\n                    // console.log(GET_MEDICAL_DEPARTMENT_REQUEST, response);\n                    dispatch({\n                        type: GET_MEDICAL_DEPARTMENT_REQUEST,\n                        payload: { data: response.data }\n                    });\n                })\n                .catch(err => {\n                    // console.error(GET_MEDICAL_DEPARTMENT_REQUEST, err);\n                });\n    };\n}\n\nexport function search_requset(param, is_useFilter, filterParams) {\n    return (dispatch, getState) => {\n        let params = {};\n        let keys = [\n            \"searchText\",\n            \"medical_departments_id\",\n            \"medical_universities_id\",\n            \"areas_id\",\n            \"offset\",\n            \"limit\",\n            \"searchType\"\n        ];\n\n        keys.map(x => {\n            if (param[x]) {\n                params[x] = param[x];\n            }\n        });\n\n        if (!params.searchType) {\n            if (params.searchText) {\n                if (params.areas_id) {\n                    params.searchType = searchType.B;\n                    params.searchText = undefined;\n                } else\n                    params.searchType =\n                        sessionStorage.getItem(\"searchType\") ||\n                        getState().searchinfo.searchType;\n            } else if (params.medical_departments_id)\n                params.searchType = searchType.B;\n        }\n        set_search_type(params.searchType);\n\n        // loading start\n        set_loading(true)(dispatch, getState);\n\n        dispatch({ type: DOCTOR_FILTER_CLEAR });\n        dispatch({ type: HOSPITAL_FILTER_CLEAR });\n        dispatch({\n            type: FILTER_CLEAR\n        });\n\n        if (params.searchText && params.medical_departments_id)\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: {\n                    searchText: params.searchText,\n                    medical_departments_id: params.medical_departments_id,\n                    searchType: params.searchType,\n                    search_state: \"search\"\n                }\n            });\n        else if (params.searchText)\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: {\n                    searchText: params.searchText,\n                    medical_departments_id: null,\n                    searchType: params.searchType,\n                    search_state: \"search\"\n                }\n            });\n        else if (params.medical_departments_id)\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: {\n                    medical_departments_id: params.medical_departments_id,\n                    searchText: \"\",\n                    searchType: params.searchType,\n                    search_state: \"search\"\n                }\n            });\n\n        getAPI(params)\n            .then(response => {\n                // console.log(SEARCH_REQUEST_SUCCESS, response);\n                dispatch({\n                    type: SEARCH_REQUEST_SUCCESS,\n                    payload: {\n                        cnt_total: response.data.cnt_total,\n                        search_path: response.data.search_path\n                    }\n                });\n                remove_doctor_list()(dispatch, getState);\n                remove_hospital_list()(dispatch, getState);\n                if (\n                    response.data.cnt_total == 0 ||\n                    response.data.cnt_total == \"0\"\n                ) {\n                    // set_loading(false)(dispatch, getState);\n                    message_open()(dispatch, getState);\n                }\n                if (response.data.list_doctor) {\n                    set_doctor_list(response)(dispatch, getState);\n                }\n                if (response.data.list_hospital) {\n                    set_hospital_list(response)(dispatch, getState);\n                }\n                if (is_useFilter) {\n                    if (filterParams)\n                        dispatch({\n                            type: FILTER_APPLY\n                        });\n                    setTimeout(\n                        getState => {\n                            if (getState().searchinfo.is_filter) {\n                                message_open()(dispatch, getState);\n                                // set_loading(false)(dispatch, getState);\n                            }\n                        },\n                        1500,\n                        getState\n                    );\n                }\n                set_loading(false)(dispatch, getState);\n            })\n            .catch(err => {\n                dispatch({\n                    type: SEARCH_REQUEST_FAILURE\n                });\n                if (\n                    err.response &&\n                    err.response.status &&\n                    err.response.status === 500\n                ) {\n                    remove_doctor_list()(dispatch);\n                    remove_hospital_list()(dispatch);\n                }\n                set_loading(false)(dispatch, getState);\n            });\n\n        setTimeout(\n            getState => {\n                if (getState().utilsinfo.loading) {\n                    set_loading(false)(dispatch, getState);\n                }\n            },\n            30000,\n            getState\n        );\n    };\n}\nexport function search_more_requset(options) {\n    return (dispatch, getState) => {\n        set_loading(true)(dispatch, getState);\n        let params = options || {};\n        let selected_tab = getState().searchinfo.selected_tab;\n        let searchType = sessionStorage.getItem(\"searchType\");\n        let keys = [\"searchText\", \"medical_departments_id\"];\n        keys.map(x => {\n            if (getState().searchinfo[x]) {\n                params[x] = getState().searchinfo[x];\n            }\n        });\n        if (\n            !params.offset &&\n            getState()[selected_tab + \"info\"] &&\n            getState()[selected_tab + \"info\"].offset\n        ) {\n            params.offset = getState()[selected_tab + \"info\"].offset;\n        }\n        if (Router.query.areas_id) {\n            params.areas_id = Router.query.areas_id;\n            params.searchText = undefined;\n            params.medical_departments_id = undefined;\n        }\n        if (params.searchText)\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: {\n                    searchText: params.searchText,\n                    searchType,\n                    search_state: \"more\"\n                }\n            });\n        if (params.medical_departments_id)\n            dispatch({\n                type: SEARCH_REQUEST,\n                payload: {\n                    medical_departments_id: params.medical_departments_id,\n                    searchType,\n                    search_state: \"more\"\n                }\n            });\n        if (!params.searchType) {\n            params.searchType = searchType;\n        }\n        // loading start use not\n        // set_loading(true)(dispatch, getState);\n\n        getAPI(params)\n            .then(response => {\n                // console.log(SEARCH_REQUEST_SUCCESS, response);\n                dispatch({\n                    type: SEARCH_REQUEST_SUCCESS,\n                    payload: {\n                        cnt_total: response.data.cnt_total\n                    }\n                });\n                if (selected_tab === \"doctor\" && response.data.list_doctor) {\n                    set_doctor_list(response, true)(dispatch, getState);\n                }\n                if (selected_tab === \"hospital\" && response.data.list_hospital)\n                    set_hospital_list(response, true)(dispatch, getState);\n                set_loading(false)(dispatch, getState);\n            })\n            .catch(err => {\n                // console.error(SEARCH_REQUEST_FAILURE, err);\n                dispatch({\n                    type: SEARCH_REQUEST_FAILURE\n                });\n                set_loading(false)(dispatch, getState);\n            });\n\n        setTimeout(\n            getState => {\n                if (getState().utilsinfo.loading) {\n                    set_loading(false)(dispatch, getState);\n                }\n            },\n            30000,\n            getState\n        );\n    };\n}\nexport function filter_apply(param) {\n    return (dispatch, getState) => {\n        let params = param;\n        // let doctor_isfilter = getState().doctorinfo.is_filter;\n        // doctor_isfilter =\n        //     doctor_isfilter.area ||\n        //     doctor_isfilter.department ||\n        //     doctor_isfilter.universitie;\n        // const hospital_isfilter = getState().hospitalinfo.is_filter.area;\n        const selected_tab = getState().searchinfo.selected_tab;\n\n        // if (doctor_isfilter || hospital_isfilter) {\n        //     if (doctor_isfilter) dispatch({ type: DOCTOR_FILTER_CLEAR });\n        //     if (hospital_isfilter) dispatch({ type: HOSPITAL_FILTER_CLEAR });\n        //     dispatch({\n        //         type: FILTER_CLEAR\n        //     });\n        // }\n        let is_filter_docter = false;\n        let is_filter_hospital = false;\n        if (selected_tab == \"doctor\") {\n            if (params.area) {\n                area_filter_apply(params.area)(dispatch, getState);\n                is_filter_docter = true;\n            }\n            if (params.department.depth1 || params.department.depth2) {\n                department_filter_apply(params.department)(dispatch, getState);\n                is_filter_docter = true;\n            }\n            if (params.universitie) {\n                universitie_filter_apply(params.universitie)(\n                    dispatch,\n                    getState\n                );\n                is_filter_docter = true;\n            }\n        } else {\n            if (params.area) {\n                {\n                    hospital_area_filter_apply(params.area)(dispatch, getState);\n                    is_filter_hospital = true;\n                }\n            }\n        }\n        // let cnt_total = 0;\n        if (is_filter_docter || is_filter_hospital) {\n            // if (is_filter_docter)\n            //     cnt_total += getState().doctorinfo.cnt_doctor_filter;\n            // else cnt_total += getState().doctorinfo.cnt_doctor;\n            // if (is_filter_hospital)\n            //     cnt_total =\n            //         cnt_total + getState().hospitalinfo.cnt_hospital_filter;\n            // else cnt_total += getState().hospitalinfo.cnt_hospital;\n            dispatch({\n                type: FILTER_APPLY\n                // payload: {\n                //     cnt_total: cnt_total\n                // }\n            });\n            filter_apply_success(dispatch, getState);\n        }\n    };\n}\nexport function filter_free() {\n    return (dispatch, getState) => {\n        dispatch({ type: DOCTOR_FILTER_CLEAR });\n        dispatch({ type: HOSPITAL_FILTER_CLEAR });\n        dispatch({\n            type: FILTER_CLEAR,\n            payload: {\n                cnt_total:\n                    getState().hospitalinfo.cnt_hospital +\n                    getState().doctorinfo.cnt_doctor\n            }\n        });\n        filter_free_success(dispatch, getState);\n    };\n}\n\nconst filter_free_success = (dispatch, getState) => {\n    message_open()(dispatch, getState);\n};\nconst filter_apply_success = (dispatch, getState) => {\n    message_open()(dispatch, getState);\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SELECTED_TAB:\n            return {\n                ...state,\n                selected_tab:\n                    action.payload.selected_tab != undefined\n                        ? action.payload.selected_tab\n                        : \"doctor\"\n            };\n        case GET_AREA_REQUEST:\n            return {\n                ...state,\n                areas: action.payload.data\n            };\n        case GET_MEDICAL_DEPARTMENT_REQUEST:\n            return {\n                ...state,\n                departments: action.payload.data\n            };\n        case GET_MEDICAL_UNIVERSITIE_REQUEST:\n            return {\n                ...state,\n                universities: action.payload.data\n            };\n        case SEARCH_REQUEST:\n            if (action.payload.medical_departments_id)\n                return {\n                    ...state,\n                    medical_departments_id:\n                        action.payload.medical_departments_id,\n                    searchText: action.payload.searchText,\n                    searchType: action.payload.searchType,\n                    search_state: action.payload.search_state || \"search\"\n                };\n            if (action.payload.searchText)\n                return {\n                    ...state,\n                    medical_departments_id: null,\n                    searchText: action.payload.searchText,\n                    searchType: action.payload.searchType,\n                    search_state: action.payload.search_state || \"search\"\n                };\n        case SEARCH_REQUEST_SUCCESS:\n            return {\n                ...state,\n                selected_tab:\n                    action.payload.selected_tab != undefined\n                        ? action.payload.selected_tab\n                        : state.selected_tab != undefined\n                        ? state.selected_tab\n                        : \"doctor\",\n                cnt_total: action.payload.cnt_total,\n                search_path: action.payload.search_path,\n                search_state: \"success\"\n            };\n        case SEARCH_REQUEST_FAILURE:\n            return {\n                ...state,\n                cnt_total: 0,\n                search_state: \"wait\"\n            };\n        case FILTER_CLEAR:\n            return {\n                ...state,\n                // cnt_total: action.payload.cnt_total,\n                is_filter: false,\n                is_local_filter: false\n            };\n        case FILTER_APPLY:\n            return {\n                ...state,\n                // cnt_total: action.payload.cnt_total,\n                is_filter: true\n            };\n\n        case SET_CNT_TOTAL:\n            return {\n                ...state,\n                cnt_total: action.payload.cnt_total,\n                is_useFilter: false,\n                is_local_filter:\n                    action.payload.is_local_filter !== undefined\n                        ? action.payload.is_local_filter\n                        : true\n            };\n        case SET_SEARCH_TYPE:\n            return {\n                ...state,\n                searchType: action.payload.searchType\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}