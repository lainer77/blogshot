{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_POSTS_LIST } from \"../actions/types\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nvar tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(\"http://\".concat(BASE_URL, \"/\").concat(tableName), {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nvar initialState = {\n  posts: []\n};\nexport var getPostsList = function getPostsList() {\n  return function _callee(dispatch, getState) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getListAPI());\n\n          case 2:\n            data = _context.sent;\n            console.log(data);\n            dispatch({\n              type: GET_POSTS_LIST,\n              payload: {\n                data: data\n              }\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport function set_doctor_list(response, more) {\n  return function (dispatch, getState) {\n    var list_doctor = response.data.list_doctor.list;\n    var cnt_doctor = response.data.list_doctor.cnt_doctor;\n    var is_filter = getState().doctorinfo.is_filter;\n\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        var filter_doctor_list = filter_logic(list_doctor, is_filter, getState().doctorinfo.value_filter);\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return _objectSpread({}, state, {\n        posts: action.payload.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/postsinfo.js"],"names":["GET_POSTS_LIST","BASE_URL","API_TIME_OUT","axios","tableName","getListAPI","get","timeout","initialState","posts","getPostsList","dispatch","getState","data","console","log","type","payload","set_doctor_list","response","more","list_doctor","list","cnt_doctor","is_filter","doctorinfo","SET_DOCTOR_LIST","isFilter","filter_doctor_list","filter_logic","value_filter","ADD_DOCTOR_LIST","state","action"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,SAAS,GAAG,OAAlB;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAOF,KAAK,CAACG,GAAN,kBAAoBL,QAApB,cAAgCG,SAAhC,GAA6C;AAClDG,IAAAA,OAAO,EAAEL,YAAY,GAAG,CAD0B,CACxB;;AADwB,GAA7C,CAAP;AAGD;;AAED,IAAMM,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcP,UAAU,EADxB;;AAAA;AACCQ,YAAAA,IADD;AAELC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAF,YAAAA,QAAQ,CAAC;AAAEK,cAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,cAAAA,OAAO,EAAE;AAAEJ,gBAAAA,IAAI,EAAEA;AAAR;AAAjC,aAAD,CAAR;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAKD,CANM;AAQP,OAAO,SAASK,eAAT,CAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;AAC9C,SAAO,UAACT,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMS,WAAW,GAAGF,QAAQ,CAACN,IAAT,CAAcQ,WAAd,CAA0BC,IAA9C;AACA,QAAMC,UAAU,GAAGJ,QAAQ,CAACN,IAAT,CAAcQ,WAAd,CAA0BE,UAA7C;AACA,QAAMC,SAAS,GAAGZ,QAAQ,GAAGa,UAAX,CAAsBD,SAAxC;;AACA,QAAI,CAACJ,IAAL,EAAW;AACTT,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEU,eADC;AAEPT,QAAAA,OAAO,EAAE;AACPI,UAAAA,WAAW,EAAEA,WADN;AAEPE,UAAAA,UAAU,EAAEA;AAFL;AAFF,OAAD,CAAR;AAOD,KARD,MAQO;AACL,UAAII,QAAQ,CAACH,SAAD,CAAZ,EAAyB;AACvB,YAAMI,kBAAkB,GAAGC,YAAY,CACrCR,WADqC,EAErCG,SAFqC,EAGrCZ,QAAQ,GAAGa,UAAX,CAAsBK,YAHe,CAAvC;AAKAnB,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEe,eADC;AAEPd,UAAAA,OAAO,EAAE;AACPW,YAAAA,kBAAkB,EAAEA;AADb;AAFF,SAAD,CAAR;AAMD,OAZD,MAYO;AACLjB,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEe,eADC;AAEPd,UAAAA,OAAO,EAAE;AACPI,YAAAA,WAAW,EAAEA;AADN;AAFF,SAAD,CAAR;AAMD;AACF;AACF,GAlCD;AAmCD;AACD,gBAAe,YAAkC;AAAA,MAAjCW,KAAiC,uEAAzBxB,YAAyB;AAAA,MAAXyB,MAAW;;AAC/C,UAAQA,MAAM,CAACjB,IAAf;AACE,SAAKhB,cAAL;AACE,+BAAYgC,KAAZ;AAAmBvB,QAAAA,KAAK,EAAEwB,MAAM,CAAChB,OAAP,CAAeJ;AAAzC;;AACF;AACE,aAAOmB,KAAP;AAJJ;AAMD,CAPD","sourcesContent":["import { GET_POSTS_LIST } from \"../actions/types\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\n\nconst tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n  });\n}\n\nconst initialState = {\n  posts: []\n};\nexport const getPostsList = () => {\n  return async (dispatch, getState) => {\n    const data = await getListAPI();\n    console.log(data);\n    dispatch({ type: GET_POSTS_LIST, payload: { data: data } });\n  };\n};\n\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(\n          list_doctor,\n          is_filter,\n          getState().doctorinfo.value_filter\n        );\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return { ...state, posts: action.payload.data };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}