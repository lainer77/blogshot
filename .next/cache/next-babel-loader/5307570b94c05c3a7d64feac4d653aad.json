{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\"; // import { useDispatch } from \"react-redux\";\n\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction usePosting() {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(); //   const dispatch = useDispatch();\n\n  const postSave = (code = \"\", params = {}) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios.patch(`http://${BASE_URL}/posts/${code}`, {\n      json: JSON.stringify(params)\n    }, {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(res => {\n      setData(res.data);\n      setLoading(false); // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    }).catch(error => {\n      console.log(error);\n      setError(error.msg);\n      setLoading(false);\n    });\n  };\n\n  const posting = (params = {}, options = {\n    success: () => {},\n    fail: () => {},\n    finally: () => {}\n  }) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios.post(`http://${BASE_URL}/posing`, {\n      json: JSON.stringify(params)\n    }, {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(res => {\n      setData(res.data);\n      options.success(res); // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    }).catch(error => {\n      console.log(error);\n      setError(error.msg);\n      options.fail(error);\n    }).finally(() => {\n      setLoading(false);\n      options.finally();\n    });\n  };\n\n  return {\n    postSave,\n    posting,\n    loading,\n    error\n  };\n}\n\nusePosting.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\nexport default usePosting;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/usePosting.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","usePosting","loading","setLoading","error","setError","postSave","code","params","token","localStorage","getItem","patch","json","JSON","stringify","timeout","headers","then","res","setData","data","catch","console","log","msg","posting","options","success","fail","finally","post","propTypes","tableName","string","isRequired","id","any"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n// import { useDispatch } from \"react-redux\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction usePosting() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  //   const dispatch = useDispatch();\n\n  const postSave = (code = \"\", params = {}) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .patch(\n        `http://${BASE_URL}/posts/${code}`,\n        { json: JSON.stringify(params) },\n        {\n          timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n          headers: {\n            \"x-api-key\": token\n          }\n        }\n      )\n      .then(res => {\n        setData(res.data);\n        setLoading(false);\n        // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n      })\n      .catch(error => {\n        console.log(error);\n        setError(error.msg);\n        setLoading(false);\n      });\n  };\n  const posting = (\n    params = {},\n    options = { success: () => {}, fail: () => {}, finally: () => {} }\n  ) => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .post(\n        `http://${BASE_URL}/posing`,\n        { json: JSON.stringify(params) },\n        {\n          timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n          headers: {\n            \"x-api-key\": token\n          }\n        }\n      )\n      .then(res => {\n        setData(res.data);\n        options.success(res);\n        // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n      })\n      .catch(error => {\n        console.log(error);\n        setError(error.msg);\n        options.fail(error);\n      })\n      .finally(() => {\n        setLoading(false);\n        options.finally();\n      });\n  };\n\n  return { postSave, posting, loading, error };\n}\n\nusePosting.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n\nexport default usePosting;\n"]},"metadata":{},"sourceType":"module"}