{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction useTAP(access_token = \"\") {\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n\n  const absolve = (datas = []) => {\n    if (access_token) {\n      setLoading(true);\n      return axios.post(`http://${BASE_URL}/tistory/blogs`, {\n        json: JSON.stringify(datas)\n      }, {\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n      }).catch(error => {\n        setError(error);\n        return error;\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  };\n\n  const overlap = id => {\n    if (access_token) {\n      setLoading(true);\n      return axios.get(`http://${BASE_URL}/overlap/${id}`, {\n        json: JSON.stringify(datas)\n      }, {\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n      }).catch(error => {\n        setError(error);\n        return error;\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (access_token) {\n      setLoading(true);\n      axios.get(`http://${BASE_URL}/tistory/blogs`, {\n        params: {\n          access_token: access_token\n        },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n      }).then(res => {\n        console.log(res.data);\n        setData(res.data);\n        setLoading(false);\n        return res;\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n        return error;\n      });\n    }\n  }, [access_token]);\n  return {\n    absolve,\n    overlap,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTAP.propTypes = {};\nexport default useTAP;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/useTAP.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","useTAP","access_token","data","setData","loading","setLoading","error","setError","absolve","datas","post","json","JSON","stringify","timeout","catch","finally","overlap","id","get","params","then","res","console","log","propTypes"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction useTAP(access_token = \"\") {\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const absolve = (datas = []) => {\n    if (access_token) {\n      setLoading(true);\n      return axios\n        .post(\n          `http://${BASE_URL}/tistory/blogs`,\n          { json: JSON.stringify(datas) },\n          {\n            timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n          }\n        )\n        .catch(error => {\n          setError(error);\n          return error;\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n  const overlap = id => {\n    if (access_token) {\n      setLoading(true);\n      return axios\n        .get(\n          `http://${BASE_URL}/overlap/${id}`,\n          { json: JSON.stringify(datas) },\n          {\n            timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n          }\n        )\n        .catch(error => {\n          setError(error);\n          return error;\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (access_token) {\n      setLoading(true);\n      axios\n        .get(`http://${BASE_URL}/tistory/blogs`, {\n          params: { access_token: access_token },\n          timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        })\n        .then(res => {\n          console.log(res.data);\n          setData(res.data);\n          setLoading(false);\n          return res;\n        })\n        .catch(error => {\n          setError(error);\n          setLoading(false);\n          return error;\n        });\n    }\n  }, [access_token]);\n\n  return {\n    absolve,\n    overlap,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTAP.propTypes = {};\n\nexport default useTAP;\n"]},"metadata":{},"sourceType":"module"}