{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/daehankim/Documents/GitHub/blogshot/reducers/hospitalinfo.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SET_HOSPITAL_LIST, ADD_HOSPITAL_LIST, SELECTED_HOSPITAL, SELECTED_HOSPITAL_SUCCESS, SELECTED_HOSPITAL_FAILURE, EXTENTION_HOSPITAL, HOSPITAL_AREA_FILTER_APPLY, HOSPITAL_FILTER_CLEAR, HOSPITAL_REVIEW_LIST, HOSPITAL_REVIEW_LIST_SUCCESS, HOSPITAL_REVIEW_LIST_FAILURE, GET_HOSPITAL_ALL_REVIEW, RMV_HOSPITAL_LIST } from \"../actions/types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport Router from \"next/router\";\nimport { set_loading, set_message, message_open, message_close } from \"./utilsinfo\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport { get_area_requset, get_medical_departments_requset, get_medical_universities_requset } from \"./searchinfo\";\nimport { set_doctor_list, area_filter_apply as doctor_area_filter_apply, department_filter_apply, universitie_filter_apply } from \"./doctorinfo\";\nimport { errorExcute } from \"../logic/errorLogic\";\nvar initialState = {\n  list_hospital: [],\n  filter_hospital: [],\n  extend_doctor_list: [],\n  extended_hospital_id: null,\n  cnt_hospital: 0,\n  cnt_hospital_filter: 0,\n  is_filter: {\n    area: false\n  },\n  selected_hospital_id: null,\n  data: {},\n  selected_state: \"wait\",\n  // success, failure, wait, try,\n  // extention_hospital_id:\n  hospital_review_list: [],\n  hospital_review_state: \"stay\"\n};\nexport function set_hospital_state(prams) {\n  return function (dispatch, getState) {};\n}\nexport var hospitalState = {\n  setState: set_hospital_state,\n  state: initialState\n};\n\nfunction getAPI(id, exUrl, key, token) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/hospital/\").concat(id).concat(exUrl || \"\"), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": key\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nfunction getAPI2(id, options) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/search/doctors/in_hospital/\").concat(id), {\n    params: options,\n    headers: {// 요청 헤더\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nfunction getAPIAsync(id, options) {\n  var response;\n  response = axios.get(\"https://\".concat(BASE_URL, \"/search/doctors/in_hospital/\").concat(id), {\n    params: options,\n    headers: {// 요청 헤더\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n  return response;\n}\n\nvar getAPI3 = function getAPI3(type, types, loginkey, token) {\n  var encodeForm = function encodeForm(data) {\n    return _Object$keys(data).map(function (key) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]);\n    }).join(\"&\");\n  };\n\n  if (type == \"post\") {\n    return axios.post(\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type].url), encodeForm(types[type].data), {\n      params: {\n        token: token\n      },\n      headers: token ? {} : {\n        // 요청 헤더\n        \"X-Api-Key\": loginkey\n      },\n      timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n    });\n  } else if (type == \"put\") return axios.put(\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type].url), encodeForm(types[type].data), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });else if (type == \"del\") return axios[\"delete\"](\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type]), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n\n  return axios.get(\"https://\".concat(BASE_URL, \"/my/review/hospital/getAll\"), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n};\n\nexport var hospital_review_request = function hospital_review_request(type, review_id, data) {\n  var is_selected_hospital = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (dispatch, getState) {\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token || localStorage.getItem(\"jwt_token\");\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    set_loading(true)(dispatch, getState);\n    var types = {\n      get: \"/hospital/getAll\",\n      post: {\n        url: \"/hospital/\".concat(getState().hospitalinfo.data.id),\n        data: data\n      },\n      put: {\n        url: \"/h/\".concat(review_id || \"\"),\n        data: data\n      },\n      del: \"/h/\".concat(review_id || \"\")\n    };\n    dispatch({\n      type: HOSPITAL_REVIEW_LIST\n    });\n    getAPI3(type, types, jwt_token, token).then(function (response) {\n      var tryBol = true; // console.log(HOSPITAL_REVIEW_LIST_SUCCESS, type, response);\n\n      if (type == \"get\") {\n        set_loading(false)(dispatch, getState);\n        if (getState().utilsinfo.msg !== \"\") message_open()(dispatch, getState);\n        var this_hospital_data = response.data;\n        dispatch({\n          type: HOSPITAL_REVIEW_LIST_SUCCESS,\n          payload: {\n            hospital_review_list: this_hospital_data\n          }\n        });\n      } else if (type == \"post\") {\n        if (response.data.code === 0) {\n          set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n          tryBol = true;\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n          tryBol = false;\n        }\n\n        hospital_review_request(\"get\")(dispatch, getState);\n      } else if (type == \"put\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n          tryBol = true;\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n          tryBol = false;\n        }\n\n        hospital_review_request(\"get\")(dispatch, getState);\n      } else if (type == \"del\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n          tryBol = true;\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n          tryBol = false;\n        }\n\n        hospital_review_request(\"get\")(dispatch, getState);\n      }\n\n      return tryBol;\n    })[\"catch\"](function (err, req) {\n      // console.error(HOSPITAL_REVIEW_LIST_FAILURE, err, req);\n      dispatch({\n        type: HOSPITAL_REVIEW_LIST_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n\n      if (type === \"get\") {\n        message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"post\") {\n        message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"del\") {\n        message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"put\") {\n        message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n      }\n    });\n  };\n};\nexport var get_hostpital_all_review = function get_hostpital_all_review(hospital_id) {\n  return function (dispatch, getState) {\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    var extantionsUrl = \"/review\";\n    getAPI(hospital_id, extantionsUrl, jwt_token, token).then(function (response) {\n      // console.log(GET_HOSPITAL_ALL_REVIEW + \"_SUCCESS\", response);\n      dispatch({\n        type: GET_HOSPITAL_ALL_REVIEW,\n        payload: {\n          data: response.data\n        }\n      });\n    })[\"catch\"](function (err) {\n      // console.error(GET_HOSPITAL_ALL_REVIEW + \"_FAILURE\", err);\n      if (err.response) {\n        var cb;\n        var params;\n        if (err.response === 403) cb = function cb() {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n        errorExcute(err.response.status, params, cb);\n      }\n    });\n  };\n};\nexport function set_hospital_list(response, more) {\n  return function (dispatch, getState) {\n    var list_hospital = response.data.list_hospital.list;\n    var cnt_hospital = response.data.list_hospital.cnt_hospital;\n    var is_filter = getState().hospitalinfo.is_filter.area;\n\n    if (!more) {\n      dispatch({\n        type: SET_HOSPITAL_LIST,\n        payload: {\n          list_hospital: list_hospital,\n          cnt_hospital: cnt_hospital\n        }\n      });\n    } else {\n      if (is_filter) {\n        var filter_hospital_list = list_hospital.filter(function (x) {\n          return x.juso.indexOf(text) == 0 ? true : false;\n        });\n        dispatch({\n          type: ADD_HOSPITAL_LIST,\n          payload: {\n            filter_hospital_list: filter_hospital_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_HOSPITAL_LIST,\n          payload: {\n            list_hospital: response.data.list_hospital.list\n          }\n        });\n      }\n    }\n  };\n}\nexport function area_filter_apply(text) {\n  return function (dispatch, getState) {\n    if (text.indexOf(\"전체\") == 0) return;\n    var list_hospital = getState().hospitalinfo.list_hospital;\n    if (!list_hospital || list_hospital.length <= 0) return; //\n\n    var filter_hospital_list = list_hospital.filter(function (x) {\n      return x.juso.indexOf(text) == 0 ? true : false;\n    });\n    var filter_hospital_cnt = filter_hospital_list.length;\n    var filter_hospital = filter_hospital_list;\n    dispatch({\n      type: HOSPITAL_AREA_FILTER_APPLY,\n      payload: {\n        filter_hospital: filter_hospital,\n        cnt_hospital_filter: filter_hospital_cnt\n      }\n    });\n  };\n}\nexport function selected_hospital(id) {\n  return function (dispatch, getState) {\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: SELECTED_HOSPITAL,\n      payload: {\n        selected_hospital_id: id\n      }\n    });\n    getAPI(id, null, jwt_token, token).then(function (response) {\n      var data = response.data; // console.log(response);\n\n      dispatch({\n        type: SELECTED_HOSPITAL_SUCCESS,\n        payload: {\n          data: data\n        }\n      });\n      setTimeout(function () {\n        set_loading(false)(dispatch, getState);\n      }, 1000);\n    })[\"catch\"](function (err) {\n      // console.error(SELECTED_HOSPITAL_FAILURE, err);\n      if (err.response) {\n        var cb;\n        var params;\n        if (err.response === 403) cb = function cb() {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n        errorExcute(err.response.status, params, cb);\n      }\n\n      dispatch({\n        type: SELECTED_HOSPITAL_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    });\n  };\n}\nexport function remove_hospital_list() {\n  return function (dispatch) {\n    dispatch({\n      type: RMV_HOSPITAL_LIST\n    });\n  };\n}\nexport function extention_doctor_list(id, options) {\n  return function _callee(dispatch, getState) {\n    var option;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            option = {\n              offset: options ? options.offset : 0,\n              limit: options ? options.limit : 5\n            };\n            set_loading(true)(dispatch, getState);\n            getAPI2(id, option).then(function (response) {\n              var data = response.data; // console.log(response);\n\n              var arg = {\n                type: EXTENTION_HOSPITAL,\n                payload: {\n                  extend_doctor_list: data.list_doctor.list,\n                  extended_hospital_id: id\n                }\n              };\n              dispatch(arg);\n              set_loading(false)(dispatch, getState);\n            })[\"catch\"](function (err) {\n              // console.error(EXTENTION_HOSPITAL, err);\n              set_loading(false)(dispatch, getState);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n}\nexport function full_search_doctor_list(id, options) {\n  return function _callee2(dispatch, getState) {\n    var option, response, extention_doctor_list;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            set_loading(true)(dispatch, getState);\n            option = {\n              offset: options ? options.offset : 0,\n              limit: options ? options.limit : 50\n            };\n            extention_doctor_list = getState().hospitalinfo.extention_doctor_list;\n            response = {\n              data: {\n                list_doctor: {\n                  list: null,\n                  cnt_doctor: null\n                }\n              }\n            }; // redering deilay\n\n            setTimeout(function () {\n              if (getState().utilsinfo.loading) {\n                message_open(__jsx(React.Fragment, null, \"\\uBAA8\\uB450 \\uBCF4\\uAE30\\uC5D0 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4.\", __jsx(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 479\n                  },\n                  __self: this\n                }), \"\\uC7A0\\uC2DC \\uD6C4 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\"))(dispatch, getState);\n                Router.back();\n                set_loading(false)(dispatch, getState);\n              }\n            }, 14000);\n\n            if (!(!extention_doctor_list || extention_doctor_list.length <= 0)) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(getAPIAsync(id, option));\n\n          case 8:\n            response = _context2.sent;\n            if (response) response.data.list_doctor.list = response.data.list_doctor.list.slice(option.offset, option.limit);else {\n              set_loading(false)(dispatch, getState);\n            }\n            _context2.next = 13;\n            break;\n\n          case 12:\n            response.data.list_doctor.list = extention_doctor_list.slice(option.offset, option.limit);\n\n          case 13:\n            set_loading(false)(dispatch, getState); // 불필요한 병원 정보 초기화\n\n            set_hospital_list({\n              data: {\n                list_hospital: {\n                  list: [],\n                  cnt_hospital: 0\n                }\n              }\n            })(dispatch, getState); // 의사 리스트\n\n            if (response) {\n              set_doctor_list(response)(dispatch, getState);\n              dispatch({\n                type: \"SET_CNT_TOTAL\",\n                payload: {\n                  cnt_total: response.data.list_doctor.cnt_doctor,\n                  is_local_filter: true\n                }\n              });\n            }\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n}\nexport function more_search_doctor_list(options) {\n  return function _callee3(dispatch, getState) {\n    var id, option, response, extention_doctor_list;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            set_loading(true)(dispatch, getState);\n            id = Router.query.hospital_id;\n            option = {\n              offset: options ? options.offset : 0,\n              limit: options ? options.limit : 50\n            };\n            extention_doctor_list = getState().hospitalinfo.extention_doctor_list;\n            response = {\n              data: {\n                list_doctor: {\n                  list: null,\n                  cnt_doctor: null\n                }\n              }\n            };\n\n            if (!(!extention_doctor_list || extention_doctor_list.length <= 0)) {\n              _context3.next = 12;\n              break;\n            }\n\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(getAPIAsync(id, option));\n\n          case 8:\n            response = _context3.sent;\n            // console.log(response);\n            response.data.list_doctor.list = response.data.list_doctor.list.slice(option.offset, option.limit);\n            _context3.next = 13;\n            break;\n\n          case 12:\n            response.data.list_doctor.list = extention_doctor_list.slice(option.offset, option.limit);\n\n          case 13:\n            getAPI2(id, option).then(function (response) {\n              var data = response.data; // console.log(response);\n              // 불필요한 병원 정보 초기화\n\n              set_hospital_list({\n                data: {\n                  list_hospital: {\n                    list: [],\n                    cnt_hospital: 0\n                  }\n                }\n              })(dispatch, getState); // 의사 리스트\n\n              set_doctor_list(response, true)(dispatch, getState); // 총 리스트 건수 카운트\n\n              dispatch({\n                type: \"SET_CNT_TOTAL\",\n                payload: {\n                  cnt_total: response.data.list_doctor.cnt_doctor,\n                  is_local_filter: true\n                }\n              }); // redering deilay\n\n              setTimeout(function () {\n                set_loading(false)(dispatch, getState);\n              }, 1500);\n              set_loading(false)(dispatch, getState);\n            })[\"catch\"](function (err) {\n              // console.error(EXTENTION_HOSPITAL, err);\n              set_loading(false)(dispatch, getState);\n            }); // if (options && options.filterable) {\n            //     let filterable = `${options.filterable}`;\n            //     let first = parseInt(filterable[0]);\n            //     filterable = filterable.slice(1);\n            //     if (Boolean(first & 1)) {\n            //         let areas_id = parseInt(filterable.slice(0, 2));\n            //         console.log(areas_id);\n            //         let area = getState().searchinfo.areas.find(\n            //             x => x.id === areas_id\n            //         );\n            //         console.log(area);\n            //         area_filter_apply(area.name)(dispatch, getState);\n            //         filterable = filterable.slice(2);\n            //     }\n            //     if (Boolean(first & 2)) {\n            //         let depth = parseInt(options.filterable[0]);\n            //         let departments_id = parseInt(options.filterable.slice(1, 4));\n            //         let departments = {};\n            //         departments = getState().searchinfo.departments.find(\n            //             x => x.id === departments_id\n            //         );\n            //         department_filter_apply(options.area)(dispatch, getState);\n            //         filterable = filterable.slice(4);\n            //     }\n            //     if (Boolean(first & 4)) {\n            //         universitie_filter_apply(options.area)(dispatch, getState);\n            //     }\n            // }\n            // getAPI2(id, option)\n            //     .then(response => {\n            //         let res = response;\n            //         console.log(response);\n            //         if (options && options.area) {\n            //         }\n            //         set_doctor_list(res)(dispatch, getState);\n            //         set_hospital_list({\n            //             data: { list_hospital: { list: [], cnt_hospital: 0 } }\n            //         })(dispatch, getState);\n            //         dispatch({\n            //             type: \"SET_CNT_TOTAL\",\n            //             payload: {\n            //                 cnt_total: res.data.list_doctor.cnt_doctor,\n            //                 is_useFilter: false\n            //             }\n            //         });\n            //         set_loading(false)(dispatch, getState);\n            //     })\n            //     .catch(err => {\n            //         console.log(EXTENTION_HOSPITAL, err);\n            //         set_loading(false)(dispatch, getState);\n            //     });\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  };\n}\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_HOSPITAL_LIST:\n      return _objectSpread({}, state, {\n        list_hospital: action.payload.list_hospital,\n        cnt_hospital: action.payload.cnt_hospital,\n        offset: action.payload.list_hospital.length\n      });\n\n    case ADD_HOSPITAL_LIST:\n      if (action.payload.list_hospital) return _objectSpread({}, state, {\n        list_hospital: [].concat(_toConsumableArray(state.list_hospital), _toConsumableArray(action.payload.list_hospital)),\n        offset: state.list_hospital.length + action.payload.list_hospital.length\n      });else return _objectSpread({}, state, {\n        filter_hospital: [].concat(_toConsumableArray(state.filter_hospital), _toConsumableArray(action.payload.filter_hospital_list)),\n        offset: state.filter_hospital_list.length + action.payload.filter_hospital_list.length\n      });\n\n    case RMV_HOSPITAL_LIST:\n      return _objectSpread({}, state, {\n        list_hospital: [],\n        cnt_hospital: 0,\n        offset: 0\n      });\n\n    case SELECTED_HOSPITAL:\n      return _objectSpread({}, state, {\n        selected_hospital_id: action.payload.selected_hospital_id,\n        selected_state: \"try\"\n      });\n\n    case SELECTED_HOSPITAL_SUCCESS:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {}, action.payload.data),\n        selected_state: \"success\"\n      });\n\n    case SELECTED_HOSPITAL_FAILURE:\n      return _objectSpread({}, state, {\n        selected_state: \"failure\"\n      });\n\n    case EXTENTION_HOSPITAL:\n      return _objectSpread({}, state, {\n        extend_doctor_list: action.payload.extend_doctor_list,\n        extended_hospital_id: action.payload.extended_hospital_id\n      });\n\n    case HOSPITAL_AREA_FILTER_APPLY:\n      return _objectSpread({}, state, {\n        filter_hospital: action.payload.filter_hospital,\n        cnt_hospital_filter: action.payload.cnt_hospital_filter,\n        is_filter: {\n          area: true\n        }\n      });\n\n    case HOSPITAL_FILTER_CLEAR:\n      return _objectSpread({}, state, {\n        filter_hospital: {},\n        is_filter: {\n          area: false\n        },\n        offset: state.list_hospital.length\n      });\n\n    case HOSPITAL_REVIEW_LIST:\n      return _objectSpread({}, state, {\n        hospital_review_state: \"request\"\n      });\n\n    case HOSPITAL_REVIEW_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        hospital_review_list: action.payload.hospital_review_list,\n        hospital_review_state: \"success\"\n      });\n\n    case HOSPITAL_REVIEW_LIST_FAILURE:\n      return _objectSpread({}, state, {\n        hospital_review_state: \"failure\"\n      });\n\n    case GET_HOSPITAL_ALL_REVIEW:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          hospital_all_review: action.payload.data\n        })\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/hospitalinfo.js"],"names":["SET_HOSPITAL_LIST","ADD_HOSPITAL_LIST","SELECTED_HOSPITAL","SELECTED_HOSPITAL_SUCCESS","SELECTED_HOSPITAL_FAILURE","EXTENTION_HOSPITAL","HOSPITAL_AREA_FILTER_APPLY","HOSPITAL_FILTER_CLEAR","HOSPITAL_REVIEW_LIST","HOSPITAL_REVIEW_LIST_SUCCESS","HOSPITAL_REVIEW_LIST_FAILURE","GET_HOSPITAL_ALL_REVIEW","RMV_HOSPITAL_LIST","axios","BASE_URL","API_TIME_OUT","Router","set_loading","set_message","message_open","message_close","set_kakao_logout","get_area_requset","get_medical_departments_requset","get_medical_universities_requset","set_doctor_list","area_filter_apply","doctor_area_filter_apply","department_filter_apply","universitie_filter_apply","errorExcute","initialState","list_hospital","filter_hospital","extend_doctor_list","extended_hospital_id","cnt_hospital","cnt_hospital_filter","is_filter","area","selected_hospital_id","data","selected_state","hospital_review_list","hospital_review_state","set_hospital_state","prams","dispatch","getState","hospitalState","setState","state","getAPI","id","exUrl","key","token","get","params","headers","timeout","getAPI2","options","getAPIAsync","response","getAPI3","type","types","loginkey","encodeForm","map","encodeURIComponent","join","post","url","put","hospital_review_request","review_id","is_selected_hospital","jwt_token","kakaoinfo","login","localStorage","getItem","query","is_login","hospitalinfo","del","then","tryBol","utilsinfo","msg","this_hospital_data","payload","code","err","req","get_hostpital_all_review","hospital_id","extantionsUrl","cb","status","set_hospital_list","more","list","filter_hospital_list","filter","x","juso","indexOf","text","length","filter_hospital_cnt","selected_hospital","setTimeout","remove_hospital_list","extention_doctor_list","option","offset","limit","arg","list_doctor","full_search_doctor_list","cnt_doctor","loading","back","slice","cnt_total","is_local_filter","more_search_doctor_list","action","hospital_all_review"],"mappings":"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","sourcesContent":["import {\n    SET_HOSPITAL_LIST,\n    ADD_HOSPITAL_LIST,\n    SELECTED_HOSPITAL,\n    SELECTED_HOSPITAL_SUCCESS,\n    SELECTED_HOSPITAL_FAILURE,\n    EXTENTION_HOSPITAL,\n    HOSPITAL_AREA_FILTER_APPLY,\n    HOSPITAL_FILTER_CLEAR,\n    HOSPITAL_REVIEW_LIST,\n    HOSPITAL_REVIEW_LIST_SUCCESS,\n    HOSPITAL_REVIEW_LIST_FAILURE,\n    GET_HOSPITAL_ALL_REVIEW,\n    RMV_HOSPITAL_LIST\n} from \"../actions/types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport Router from \"next/router\";\n\nimport {\n    set_loading,\n    set_message,\n    message_open,\n    message_close\n} from \"./utilsinfo\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport {\n    get_area_requset,\n    get_medical_departments_requset,\n    get_medical_universities_requset\n} from \"./searchinfo\";\nimport {\n    set_doctor_list,\n    area_filter_apply as doctor_area_filter_apply,\n    department_filter_apply,\n    universitie_filter_apply\n} from \"./doctorinfo\";\n\nimport { errorExcute } from \"../logic/errorLogic\";\n\nconst initialState = {\n    list_hospital: [],\n    filter_hospital: [],\n    extend_doctor_list: [],\n    extended_hospital_id: null,\n    cnt_hospital: 0,\n    cnt_hospital_filter: 0,\n    is_filter: { area: false },\n    selected_hospital_id: null,\n    data: {},\n    selected_state: \"wait\", // success, failure, wait, try,\n    // extention_hospital_id:\n\n    hospital_review_list: [],\n    hospital_review_state: \"stay\"\n};\n\nexport function set_hospital_state(prams) {\n    return (dispatch, getState) => {};\n}\nexport const hospitalState = {\n    setState: set_hospital_state,\n    state: initialState\n};\nfunction getAPI(id, exUrl, key, token) {\n    return axios.get(`https://${BASE_URL}/hospital/${id}${exUrl || \"\"}`, {\n        params: { token },\n        headers: token\n            ? {}\n            : {\n                  // 요청 헤더\n                  \"X-Api-Key\": key\n              },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nfunction getAPI2(id, options) {\n    return axios.get(`https://${BASE_URL}/search/doctors/in_hospital/${id}`, {\n        params: options,\n        headers: {\n            // 요청 헤더\n        },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nfunction getAPIAsync(id, options) {\n    let response;\n    response = axios.get(\n        `https://${BASE_URL}/search/doctors/in_hospital/${id}`,\n        {\n            params: options,\n            headers: {\n                // 요청 헤더\n            },\n            timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        }\n    );\n\n    return response;\n}\nconst getAPI3 = (type, types, loginkey, token) => {\n    const encodeForm = data => {\n        return Object.keys(data)\n            .map(\n                key =>\n                    encodeURIComponent(key) +\n                    \"=\" +\n                    encodeURIComponent(data[key])\n            )\n            .join(\"&\");\n    };\n    if (type == \"post\") {\n        return axios.post(\n            `https://${BASE_URL}/my/review${types[type].url}`,\n            encodeForm(types[type].data),\n            {\n                params: { token },\n                headers: token\n                    ? {}\n                    : {\n                          // 요청 헤더\n                          \"X-Api-Key\": loginkey\n                      },\n                timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n            }\n        );\n    } else if (type == \"put\")\n        return axios.put(\n            `https://${BASE_URL}/my/review${types[type].url}`,\n            encodeForm(types[type].data),\n            {\n                params: { token },\n                headers: token\n                    ? {}\n                    : {\n                          // 요청 헤더\n                          \"X-Api-Key\": loginkey\n                      },\n                timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n            }\n        );\n    else if (type == \"del\")\n        return axios.delete(`https://${BASE_URL}/my/review${types[type]}`, {\n            params: { token },\n            headers: token\n                ? {}\n                : {\n                      // 요청 헤더\n                      \"X-Api-Key\": loginkey\n                  },\n            timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n        });\n    return axios.get(`https://${BASE_URL}/my/review/hospital/getAll`, {\n        params: { token },\n        headers: token\n            ? {}\n            : {\n                  // 요청 헤더\n                  \"X-Api-Key\": loginkey\n              },\n        timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n    });\n};\n\nexport const hospital_review_request = (\n    type,\n    review_id,\n    data,\n    is_selected_hospital = true\n) => {\n    return (dispatch, getState) => {\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token =\n                getState().kakaoinfo.login.jwt_token ||\n                localStorage.getItem(\"jwt_token\");\n        let token;\n        if (Router.query.token && !getState().kakaoinfo.is_login)\n            token = Router.query.token;\n\n        set_loading(true)(dispatch, getState);\n        const types = {\n            get: \"/hospital/getAll\",\n            post: {\n                url: `/hospital/${getState().hospitalinfo.data.id}`,\n                data: data\n            },\n            put: { url: `/h/${review_id || \"\"}`, data: data },\n            del: `/h/${review_id || \"\"}`\n        };\n        dispatch({ type: HOSPITAL_REVIEW_LIST });\n        getAPI3(type, types, jwt_token, token)\n            .then(response => {\n                let tryBol = true;\n                // console.log(HOSPITAL_REVIEW_LIST_SUCCESS, type, response);\n                if (type == \"get\") {\n                    set_loading(false)(dispatch, getState);\n                    if (getState().utilsinfo.msg !== \"\")\n                        message_open()(dispatch, getState);\n                    let this_hospital_data = response.data;\n\n                    dispatch({\n                        type: HOSPITAL_REVIEW_LIST_SUCCESS,\n                        payload: {\n                            hospital_review_list: this_hospital_data\n                        }\n                    });\n                } else if (type == \"post\") {\n                    if (response.data.code === 0) {\n                        set_message(\"소중한 리뷰 감사드립니다!\")(\n                            dispatch,\n                            getState\n                        );\n                        tryBol = true;\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                        tryBol = false;\n                    }\n                    hospital_review_request(\"get\")(dispatch, getState);\n                } else if (type == \"put\") {\n                    if (response.data.code === 0) {\n                        set_message(\"리뷰가 수정되었습니다!\")(\n                            dispatch,\n                            getState\n                        );\n                        tryBol = true;\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                        tryBol = false;\n                    }\n                    hospital_review_request(\"get\")(dispatch, getState);\n                } else if (type == \"del\") {\n                    if (response.data.code === 0) {\n                        set_message(\"리뷰가 삭제되었습니다!\")(\n                            dispatch,\n                            getState\n                        );\n                        tryBol = true;\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                        tryBol = false;\n                    }\n                    hospital_review_request(\"get\")(dispatch, getState);\n                }\n                return tryBol;\n            })\n            .catch((err, req) => {\n                // console.error(HOSPITAL_REVIEW_LIST_FAILURE, err, req);\n                dispatch({ type: HOSPITAL_REVIEW_LIST_FAILURE });\n                set_loading(false)(dispatch, getState);\n                if (type === \"get\") {\n                    message_open(\"리뷰 가져오기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"post\") {\n                    message_open(\"리뷰 등록하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"del\") {\n                    message_open(\"리뷰 삭제하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"put\") {\n                    message_open(\"리뷰 수정하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n            });\n    };\n};\nexport const get_hostpital_all_review = hospital_id => {\n    return (dispatch, getState) => {\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n        let token;\n        if (Router.query.token && !getState().kakaoinfo.is_login)\n            token = Router.query.token;\n        const extantionsUrl = \"/review\";\n        getAPI(hospital_id, extantionsUrl, jwt_token, token)\n            .then(response => {\n                // console.log(GET_HOSPITAL_ALL_REVIEW + \"_SUCCESS\", response);\n                dispatch({\n                    type: GET_HOSPITAL_ALL_REVIEW,\n                    payload: { data: response.data }\n                });\n            })\n            .catch(err => {\n                // console.error(GET_HOSPITAL_ALL_REVIEW + \"_FAILURE\", err);\n                if (err.response) {\n                    let cb;\n                    let params;\n\n                    if (err.response === 403)\n                        cb = () => {\n                            set_kakao_logout(jwt_token)(dispatch, getState);\n                        };\n                    errorExcute(err.response.status, params, cb);\n                }\n            });\n    };\n};\nexport function set_hospital_list(response, more) {\n    return (dispatch, getState) => {\n        const list_hospital = response.data.list_hospital.list;\n        const cnt_hospital = response.data.list_hospital.cnt_hospital;\n        const is_filter = getState().hospitalinfo.is_filter.area;\n\n        if (!more) {\n            dispatch({\n                type: SET_HOSPITAL_LIST,\n                payload: {\n                    list_hospital: list_hospital,\n                    cnt_hospital: cnt_hospital\n                }\n            });\n        } else {\n            if (is_filter) {\n                const filter_hospital_list = list_hospital.filter(x =>\n                    x.juso.indexOf(text) == 0 ? true : false\n                );\n                dispatch({\n                    type: ADD_HOSPITAL_LIST,\n                    payload: {\n                        filter_hospital_list: filter_hospital_list\n                    }\n                });\n            } else {\n                dispatch({\n                    type: ADD_HOSPITAL_LIST,\n                    payload: {\n                        list_hospital: response.data.list_hospital.list\n                    }\n                });\n            }\n        }\n    };\n}\n\nexport function area_filter_apply(text) {\n    return (dispatch, getState) => {\n        if (text.indexOf(\"전체\") == 0) return;\n        const list_hospital = getState().hospitalinfo.list_hospital;\n\n        if (!list_hospital || list_hospital.length <= 0) return;\n        //\n        const filter_hospital_list = list_hospital.filter(x =>\n            x.juso.indexOf(text) == 0 ? true : false\n        );\n        const filter_hospital_cnt = filter_hospital_list.length;\n\n        const filter_hospital = filter_hospital_list;\n\n        dispatch({\n            type: HOSPITAL_AREA_FILTER_APPLY,\n            payload: {\n                filter_hospital: filter_hospital,\n                cnt_hospital_filter: filter_hospital_cnt\n            }\n        });\n    };\n}\nexport function selected_hospital(id) {\n    return (dispatch, getState) => {\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n\n        let token;\n        if (Router.query.token && !getState().kakaoinfo.is_login)\n            token = Router.query.token;\n\n        set_loading(true)(dispatch, getState);\n        dispatch({\n            type: SELECTED_HOSPITAL,\n            payload: { selected_hospital_id: id }\n        });\n        getAPI(id, null, jwt_token, token)\n            .then(response => {\n                const data = response.data;\n                // console.log(response);\n                dispatch({\n                    type: SELECTED_HOSPITAL_SUCCESS,\n                    payload: { data: data }\n                });\n                setTimeout(() => {\n                    set_loading(false)(dispatch, getState);\n                }, 1000);\n            })\n            .catch(err => {\n                // console.error(SELECTED_HOSPITAL_FAILURE, err);\n                if (err.response) {\n                    let cb;\n                    let params;\n\n                    if (err.response === 403)\n                        cb = () => {\n                            set_kakao_logout(jwt_token)(dispatch, getState);\n                        };\n\n                    errorExcute(err.response.status, params, cb);\n                }\n                dispatch({\n                    type: SELECTED_HOSPITAL_FAILURE\n                });\n                set_loading(false)(dispatch, getState);\n            });\n    };\n}\nexport function remove_hospital_list() {\n    return dispatch => {\n        dispatch({\n            type: RMV_HOSPITAL_LIST\n        });\n    };\n}\n\nexport function extention_doctor_list(id, options) {\n    return async (dispatch, getState) => {\n        let option = {\n            offset: options ? options.offset : 0,\n            limit: options ? options.limit : 5\n        };\n\n        set_loading(true)(dispatch, getState);\n        getAPI2(id, option)\n            .then(response => {\n                const data = response.data;\n                // console.log(response);\n                let arg = {\n                    type: EXTENTION_HOSPITAL,\n                    payload: {\n                        extend_doctor_list: data.list_doctor.list,\n                        extended_hospital_id: id\n                    }\n                };\n                dispatch(arg);\n                set_loading(false)(dispatch, getState);\n            })\n            .catch(err => {\n                // console.error(EXTENTION_HOSPITAL, err);\n                set_loading(false)(dispatch, getState);\n            });\n    };\n}\nexport function full_search_doctor_list(id, options) {\n    return async (dispatch, getState) => {\n        set_loading(true)(dispatch, getState);\n        let option = {\n            offset: options ? options.offset : 0,\n            limit: options ? options.limit : 50\n        };\n\n        let response;\n        let extention_doctor_list = getState().hospitalinfo\n            .extention_doctor_list;\n        response = {\n            data: {\n                list_doctor: {\n                    list: null,\n\n                    cnt_doctor: null\n                }\n            }\n        };\n        // redering deilay\n        setTimeout(() => {\n            if (getState().utilsinfo.loading) {\n                message_open(\n                    <>\n                        모두 보기에 실패했습니다.\n                        <br />\n                        잠시 후 다시 시도해주세요.\n                    </>\n                )(dispatch, getState);\n                Router.back();\n                set_loading(false)(dispatch, getState);\n            }\n        }, 14000);\n        if (!extention_doctor_list || extention_doctor_list.length <= 0) {\n            response = await getAPIAsync(id, option);\n            if (response)\n                response.data.list_doctor.list = response.data.list_doctor.list.slice(\n                    option.offset,\n                    option.limit\n                );\n            else {\n                set_loading(false)(dispatch, getState);\n            }\n        } else {\n            response.data.list_doctor.list = extention_doctor_list.slice(\n                option.offset,\n                option.limit\n            );\n        }\n\n        set_loading(false)(dispatch, getState);\n\n        // 불필요한 병원 정보 초기화\n        set_hospital_list({\n            data: {\n                list_hospital: {\n                    list: [],\n                    cnt_hospital: 0\n                }\n            }\n        })(dispatch, getState);\n\n        // 의사 리스트\n\n        if (response) {\n            set_doctor_list(response)(dispatch, getState);\n\n            dispatch({\n                type: \"SET_CNT_TOTAL\",\n                payload: {\n                    cnt_total: response.data.list_doctor.cnt_doctor,\n                    is_local_filter: true\n                }\n            });\n        }\n    };\n}\nexport function more_search_doctor_list(options) {\n    return async (dispatch, getState) => {\n        set_loading(true)(dispatch, getState);\n        let id = Router.query.hospital_id;\n\n        let option = {\n            offset: options ? options.offset : 0,\n            limit: options ? options.limit : 50\n        };\n\n        let response;\n        let extention_doctor_list = getState().hospitalinfo\n            .extention_doctor_list;\n        response = {\n            data: {\n                list_doctor: {\n                    list: null,\n\n                    cnt_doctor: null\n                }\n            }\n        };\n        if (!extention_doctor_list || extention_doctor_list.length <= 0) {\n            response = await getAPIAsync(id, option);\n            // console.log(response);\n            response.data.list_doctor.list = response.data.list_doctor.list.slice(\n                option.offset,\n                option.limit\n            );\n        } else {\n            response.data.list_doctor.list = extention_doctor_list.slice(\n                option.offset,\n                option.limit\n            );\n        }\n\n        getAPI2(id, option)\n            .then(response => {\n                const data = response.data;\n                // console.log(response);\n                // 불필요한 병원 정보 초기화\n                set_hospital_list({\n                    data: {\n                        list_hospital: {\n                            list: [],\n                            cnt_hospital: 0\n                        }\n                    }\n                })(dispatch, getState);\n\n                // 의사 리스트\n                set_doctor_list(response, true)(dispatch, getState);\n\n                // 총 리스트 건수 카운트\n                dispatch({\n                    type: \"SET_CNT_TOTAL\",\n                    payload: {\n                        cnt_total: response.data.list_doctor.cnt_doctor,\n                        is_local_filter: true\n                    }\n                });\n\n                // redering deilay\n                setTimeout(() => {\n                    set_loading(false)(dispatch, getState);\n                }, 1500);\n\n                set_loading(false)(dispatch, getState);\n            })\n            .catch(err => {\n                // console.error(EXTENTION_HOSPITAL, err);\n                set_loading(false)(dispatch, getState);\n            });\n\n        // if (options && options.filterable) {\n        //     let filterable = `${options.filterable}`;\n        //     let first = parseInt(filterable[0]);\n        //     filterable = filterable.slice(1);\n\n        //     if (Boolean(first & 1)) {\n        //         let areas_id = parseInt(filterable.slice(0, 2));\n        //         console.log(areas_id);\n        //         let area = getState().searchinfo.areas.find(\n        //             x => x.id === areas_id\n        //         );\n        //         console.log(area);\n        //         area_filter_apply(area.name)(dispatch, getState);\n\n        //         filterable = filterable.slice(2);\n        //     }\n        //     if (Boolean(first & 2)) {\n        //         let depth = parseInt(options.filterable[0]);\n        //         let departments_id = parseInt(options.filterable.slice(1, 4));\n        //         let departments = {};\n\n        //         departments = getState().searchinfo.departments.find(\n        //             x => x.id === departments_id\n        //         );\n\n        //         department_filter_apply(options.area)(dispatch, getState);\n\n        //         filterable = filterable.slice(4);\n        //     }\n        //     if (Boolean(first & 4)) {\n        //         universitie_filter_apply(options.area)(dispatch, getState);\n        //     }\n        // }\n        // getAPI2(id, option)\n        //     .then(response => {\n        //         let res = response;\n        //         console.log(response);\n\n        //         if (options && options.area) {\n        //         }\n\n        //         set_doctor_list(res)(dispatch, getState);\n        //         set_hospital_list({\n        //             data: { list_hospital: { list: [], cnt_hospital: 0 } }\n        //         })(dispatch, getState);\n        //         dispatch({\n        //             type: \"SET_CNT_TOTAL\",\n        //             payload: {\n        //                 cnt_total: res.data.list_doctor.cnt_doctor,\n        //                 is_useFilter: false\n        //             }\n        //         });\n        //         set_loading(false)(dispatch, getState);\n        //     })\n        //     .catch(err => {\n        //         console.log(EXTENTION_HOSPITAL, err);\n        //         set_loading(false)(dispatch, getState);\n        //     });\n    };\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_HOSPITAL_LIST:\n            return {\n                ...state,\n                list_hospital: action.payload.list_hospital,\n                cnt_hospital: action.payload.cnt_hospital,\n                offset: action.payload.list_hospital.length\n            };\n        case ADD_HOSPITAL_LIST:\n            if (action.payload.list_hospital)\n                return {\n                    ...state,\n                    list_hospital: [\n                        ...state.list_hospital,\n                        ...action.payload.list_hospital\n                    ],\n                    offset:\n                        state.list_hospital.length +\n                        action.payload.list_hospital.length\n                };\n            else\n                return {\n                    ...state,\n                    filter_hospital: [\n                        ...state.filter_hospital,\n                        ...action.payload.filter_hospital_list\n                    ],\n                    offset:\n                        state.filter_hospital_list.length +\n                        action.payload.filter_hospital_list.length\n                };\n        case RMV_HOSPITAL_LIST:\n            return {\n                ...state,\n                list_hospital: [],\n                cnt_hospital: 0,\n                offset: 0\n            };\n        case SELECTED_HOSPITAL:\n            return {\n                ...state,\n                selected_hospital_id: action.payload.selected_hospital_id,\n                selected_state: \"try\"\n            };\n        case SELECTED_HOSPITAL_SUCCESS:\n            return {\n                ...state,\n                data: { ...state.data, ...action.payload.data },\n                selected_state: \"success\"\n            };\n        case SELECTED_HOSPITAL_FAILURE:\n            return {\n                ...state,\n                selected_state: \"failure\"\n            };\n        case EXTENTION_HOSPITAL:\n            return {\n                ...state,\n                extend_doctor_list: action.payload.extend_doctor_list,\n                extended_hospital_id: action.payload.extended_hospital_id\n            };\n        case HOSPITAL_AREA_FILTER_APPLY:\n            return {\n                ...state,\n                filter_hospital: action.payload.filter_hospital,\n                cnt_hospital_filter: action.payload.cnt_hospital_filter,\n                is_filter: {\n                    area: true\n                }\n            };\n        case HOSPITAL_FILTER_CLEAR:\n            return {\n                ...state,\n                filter_hospital: {},\n                is_filter: {\n                    area: false\n                },\n                offset: state.list_hospital.length\n            };\n        case HOSPITAL_REVIEW_LIST:\n            return {\n                ...state,\n                hospital_review_state: \"request\"\n            };\n        case HOSPITAL_REVIEW_LIST_SUCCESS:\n            return {\n                ...state,\n                hospital_review_list: action.payload.hospital_review_list,\n                hospital_review_state: \"success\"\n            };\n        case HOSPITAL_REVIEW_LIST_FAILURE:\n            return {\n                ...state,\n                hospital_review_state: \"failure\"\n            };\n        case GET_HOSPITAL_ALL_REVIEW:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    hospital_all_review: action.payload.data\n                }\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}