{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport { SET_DOCTOR_LIST, ADD_DOCTOR_LIST, RMV_DOCTOR_LIST, SELECTED_DOCTOR, SELECTED_DOCTOR_SUCCESS, SELECTED_DOCTOR_FAILURE, DOCTOR_AREA_FILTER_APPLY, DEPARTMENT_FILTER_APPLY, UNIVERSITIE_FILTER_APPLY, DOCTOR_FILTER_CLEAR, DOCTOR_REVIEW_LIST, DOCTOR_REVIEW_LIST_SUCCESS, DOCTOR_REVIEW_LIST_FAILURE, GET_DOCTOR_ALL_REVIEW, ADD_DOCTOR_PAPERS } from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\n\nfunction getAPI(id, searchText, score_searchText, key, token) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/doctor/\").concat(id), {\n    params: {\n      searchText: searchText,\n      score_searchText: score_searchText,\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": key\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nfunction getReviewAllAPI(id, exUrl, key, token) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/doctor/\").concat(id).concat(exUrl || \"\"), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": key\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nfunction getAPIEx(id, exUrl, key, data) {\n  return axios.get(\"https://\".concat(BASE_URL, \"/doctor/\").concat(id).concat(exUrl || \"\"), {\n    params: data,\n    headers: {\n      // 요청 헤더\n      \"X-Api-Key\": key\n    },\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nvar getReviewAPI = function getReviewAPI(type, types, loginkey, token) {\n  var encodeForm = function encodeForm(data) {\n    return _Object$keys(data).map(function (key) {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]);\n    }).join(\"&\");\n  };\n\n  if (type == \"post\") {\n    return axios.post(\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type].url), encodeForm(types[type].data), {\n      params: {\n        token: token\n      },\n      headers: token ? {} : {\n        // 요청 헤더\n        \"X-Api-Key\": loginkey\n      },\n      timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n    });\n  } else if (type == \"put\") return axios.put(\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type].url), encodeForm(types[type].data), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });else if (type == \"del\") return axios[\"delete\"](\"https://\".concat(BASE_URL, \"/my/review\").concat(types[type]), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n\n  return axios.get(\"https://\".concat(BASE_URL, \"/my/review/doctor/getAll\"), {\n    params: {\n      token: token\n    },\n    headers: token ? {} : {\n      // 요청 헤더\n      \"X-Api-Key\": loginkey\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n};\n\nvar initialState = {\n  list_doctor: [],\n  filter_doctor: [],\n  is_filter: {\n    area: false,\n    department: false,\n    universitie: false\n  },\n  value_filter: {\n    area: null,\n    department: null,\n    universitie: null\n  },\n  cnt_doctor: 0,\n  offset: 0,\n  cnt_doctor_filter: 0,\n  selected_doctor_id: 0,\n  data: {},\n  selected_state: \"wait\",\n  // success, failure, wait, try,\n  review_data: {},\n  doctor_review_list: [],\n  doctor_review_state: \"stay\"\n};\nexport var doctor_review_request = function doctor_review_request(type, review_id, data) {\n  var is_selected_doctor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (dispatch, getState) {\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token || localStorage.getItem(\"jwt_token\");\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token; // set_loading(true)(dispatch, getState);\n\n    var types = {\n      get: \"/doctor/getAll\",\n      post: {\n        url: \"/doctor/\".concat(getState().doctorinfo.data.id),\n        data: data\n      },\n      put: {\n        url: \"/d/\".concat(review_id || \"\"),\n        data: data\n      },\n      del: \"/d/\".concat(review_id || \"\")\n    };\n    dispatch({\n      type: DOCTOR_REVIEW_LIST\n    });\n    getReviewAPI(type, types, jwt_token, token).then(function (response) {\n      if (type == \"get\") {\n        if (getState().utilsinfo.msg !== \"\") message_open()(dispatch, getState);\n        var this_doctor_data = response.data;\n        if (!this_doctor_data.code) dispatch({\n          type: DOCTOR_REVIEW_LIST_SUCCESS,\n          payload: {\n            doctor_review_list: this_doctor_data\n          }\n        });\n        if (is_selected_doctor) get_doctor_all_review(getState().doctorinfo.data.id)(dispatch, getState);\n      } else if (type == \"post\") {\n        if (response.data.code === 0) {\n          set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"put\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"del\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      }\n    })[\"catch\"](function (err, req) {\n      // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n      dispatch({\n        type: DOCTOR_REVIEW_LIST_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n\n      if (type === \"get\") {\n        message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"post\") {\n        message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"del\") {\n        message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"put\") {\n        message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n      }\n    });\n  };\n};\nexport var get_doctor_all_review = function get_doctor_all_review(doctor_id) {\n  return function (dispatch, getState) {\n    var extantionsUrl = \"/review\";\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token).then(function (response) {\n      // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n      dispatch({\n        type: GET_DOCTOR_ALL_REVIEW,\n        payload: {\n          data: response.data\n        }\n      });\n      set_loading(false);\n    })[\"catch\"](function (err) {\n      // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n      if (err.response) {\n        var cb;\n        var params;\n        if (err.response === 403) cb = function cb() {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n        errorExcute(err.response.status, params, cb);\n      }\n    });\n  };\n};\nexport var isFilter = function isFilter(is_filter) {\n  if (is_filter.area || is_filter.department || is_filter.universitie) {\n    return true;\n  }\n\n  return false;\n};\n\nvar filter_logic = function filter_logic(list, is_filter, values) {\n  var filterData = [];\n\n  if (is_filter.area && values.area) {\n    filterData = list.filter(function (x) {\n      return x.current_hospital_juso_short.indexOf(values.area) == 0 ? true : false;\n    });\n  }\n\n  if (is_filter.department && values.department) {\n    filterData = list.filter(function (x) {\n      return x.clinic.indexOf(values.department.depth1) == 0 || x.clinic.indexOf(values.department.depth2) == 0 ? true : false;\n    });\n  }\n\n  if (is_filter.universitie && values.universitie) {\n    filterData = list.filter(function (x) {\n      return x.study_last.indexOf(values.universitie) == 0 ? true : false;\n    });\n  }\n\n  return filterData;\n};\n\nexport function area_filter_apply(text) {\n  return function (dispatch, getState) {\n    if (text.indexOf(\"전체\") == 0) return;\n    var is_filter = getState().doctorinfo.is_filter;\n    var list_doctor = !is_filter.area && !is_filter.department && !is_filter.universitie ? getState().doctorinfo.list_doctor : getState().doctorinfo.filter_doctor;\n    if (!list_doctor || list_doctor.length <= 0) return; //\n\n    var filter_doctor_list = list_doctor.filter(function (x) {\n      return x.current_hospital_juso_short.indexOf(text) == 0 ? true : false;\n    });\n    var filter_doctor_cnt = filter_doctor_list.length;\n    var filter_doctor = filter_doctor_list;\n    dispatch({\n      type: DOCTOR_AREA_FILTER_APPLY,\n      payload: {\n        filter_doctor: filter_doctor,\n        cnt_doctor_filter: filter_doctor_cnt,\n        value: text\n      }\n    });\n  };\n}\nexport function department_filter_apply(param) {\n  return function (dispatch, getState) {\n    if (param.depth1 && param.depth1.indexOf(\"전체\") == 0 || param.depth2 && param.depth2.indexOf(\"선택\") == 0) return;\n    var is_filter = getState().doctorinfo.is_filter;\n    var list_doctor = !is_filter.area && !is_filter.department && !is_filter.universitie ? getState().doctorinfo.list_doctor : getState().doctorinfo.filter_doctor;\n    if (!list_doctor || list_doctor.length <= 0) return; //\n\n    var filter_doctor_list = list_doctor.filter(function (x) {\n      return x.clinic.indexOf(param.depth1) == 0 || x.clinic.indexOf(param.depth2) == 0 ? true : false;\n    });\n    var filter_doctor_cnt = filter_doctor_list.length;\n    var filter_doctor = filter_doctor_list;\n    dispatch({\n      type: DEPARTMENT_FILTER_APPLY,\n      payload: {\n        filter_doctor: filter_doctor,\n        cnt_doctor_filter: filter_doctor_cnt,\n        value: param\n      }\n    });\n  };\n}\nexport function universitie_filter_apply(text) {\n  return function (dispatch, getState) {\n    var is_filter = getState().doctorinfo.is_filter;\n    var list_doctor = !is_filter.area && !is_filter.department && !is_filter.universitie ? getState().doctorinfo.list_doctor : getState().doctorinfo.filter_doctor;\n    if (!list_doctor || list_doctor.length <= 0) return; //\n\n    var filter_doctor_list = list_doctor.filter(function (x) {\n      return x.study_last.indexOf(text) == 0 ? true : false;\n    });\n    var filter_doctor_cnt = filter_doctor_list.length;\n    var filter_doctor = filter_doctor_list;\n    dispatch({\n      type: UNIVERSITIE_FILTER_APPLY,\n      payload: {\n        filter_doctor: filter_doctor,\n        cnt_doctor_filter: filter_doctor_cnt,\n        value: text\n      }\n    });\n  };\n}\nexport function set_doctor_list(response, more) {\n  return function (dispatch, getState) {\n    var list_doctor = response.data.list_doctor.list;\n    var cnt_doctor = response.data.list_doctor.cnt_doctor;\n    var is_filter = getState().doctorinfo.is_filter;\n\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        var filter_doctor_list = filter_logic(list_doctor, is_filter, getState().doctorinfo.value_filter);\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport function remove_doctor_list() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: RMV_DOCTOR_LIST\n    });\n  };\n}\nexport var get_doctor_papers = function get_doctor_papers(doctor_id, searchText) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var extantionsUrl, jwt_token, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                extantionsUrl = \"/papers\";\n                if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n                _context.next = 4;\n                return getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n                  searchText: searchText,\n                  limit: 10\n                });\n\n              case 4:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var add_doctor_papers = function add_doctor_papers(doctor_id, searchText) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var extantionsUrl, jwt_token, offset, papers, response, cb, params;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                extantionsUrl = \"/papers\";\n                offset = 0;\n                papers = getState().doctorinfo.data.info.papers;\n                offset = papers.length;\n                if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n                  searchText: searchText,\n                  limit: 10,\n                  offset: offset\n                });\n\n              case 8:\n                response = _context2.sent;\n                dispatch({\n                  type: ADD_DOCTOR_PAPERS,\n                  payload: {\n                    papers: response.data\n                  }\n                });\n                _context2.next = 16;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](5);\n\n                if (_context2.t0.response) {\n                  if (_context2.t0.response.status === 403) cb = function cb() {\n                    set_kakao_logout(jwt_token)(dispatch, getState);\n                  };\n                } // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n\n\n                set_loading(false)(dispatch, getState);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[5, 12]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var get_doctor_wordCloud = function get_doctor_wordCloud(doctor_id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var extantionsUrl, jwt_token, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                extantionsUrl = \"/wordCloud\";\n                if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n                _context3.next = 4;\n                return getAPIEx(doctor_id, extantionsUrl, jwt_token);\n\n              case 4:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function selected_doctor(id, score_searchText, searchText, token) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var jwt_token, response, doctor_papers, doctor_wordCloud, data, cb, params;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n                set_loading(true)(dispatch, getState);\n                dispatch({\n                  type: SELECTED_DOCTOR,\n                  payload: {\n                    selected_doctor_id: id\n                  }\n                });\n                _context4.prev = 3;\n                _context4.next = 6;\n                return getAPI(id, searchText, score_searchText, jwt_token, token);\n\n              case 6:\n                response = _context4.sent;\n                data = response.data;\n\n                if (!data.score_medicofact) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                _context4.next = 11;\n                return get_doctor_papers(id, searchText)(dispatch, getState);\n\n              case 11:\n                doctor_papers = _context4.sent;\n\n              case 12:\n                if (!data.score_medicofact) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                _context4.next = 15;\n                return get_doctor_wordCloud(id)(dispatch, getState);\n\n              case 15:\n                doctor_wordCloud = _context4.sent;\n\n              case 16:\n                if (doctor_papers) {\n                  data.info.papers = doctor_papers.data;\n                }\n\n                if (doctor_wordCloud) {\n                  data.info.specialty_wordCloud = doctor_wordCloud.data.specialty_wordCloud;\n                  data.info.year_graph = doctor_wordCloud.data.year_graph;\n                }\n\n                dispatch({\n                  type: SELECTED_DOCTOR_SUCCESS,\n                  payload: {\n                    data: data\n                  }\n                });\n                setTimeout(function () {\n                  set_loading(false)(dispatch, getState);\n                }, 1000);\n                _context4.next = 27;\n                break;\n\n              case 22:\n                _context4.prev = 22;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                // console.error(SELECTED_DOCTOR_FAILURE, err);\n                if (_context4.t0.response) {\n                  console.log(_context4.t0.response);\n                  if (_context4.t0.response.status === 403) cb = function cb() {\n                    set_kakao_logout(jwt_token)(dispatch, getState);\n                  };else if (_context4.t0.response.status === 500) {\n                    selected_doctor(id, score_searchText)(dispatch, getState);\n                  }\n                  errorExcute(_context4.t0.response.status, params, cb)(dispatch, getState);\n                }\n\n                dispatch({\n                  type: SELECTED_DOCTOR_FAILURE\n                });\n                set_loading(false)(dispatch, getState);\n\n              case 27:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[3, 22]]);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DOCTOR_LIST:\n      return _objectSpread({}, state, {\n        list_doctor: action.payload.list_doctor,\n        cnt_doctor: action.payload.cnt_doctor,\n        offset: action.payload.list_doctor.length\n      });\n\n    case ADD_DOCTOR_LIST:\n      if (action.payload.list_doctor) return _objectSpread({}, state, {\n        list_doctor: [].concat(_toConsumableArray(state.list_doctor), _toConsumableArray(action.payload.list_doctor)),\n        offset: state.list_doctor.length + action.payload.list_doctor.length\n      });else return _objectSpread({}, state, {\n        filter_doctor: [].concat(_toConsumableArray(state.filter_doctor), _toConsumableArray(action.payload.filter_doctor_list)),\n        offset: state.filter_doctor_list.length + action.payload.filter_doctor_list.length\n      });\n\n    case RMV_DOCTOR_LIST:\n      return _objectSpread({}, state, {\n        list_doctor: [],\n        cnt_doctor: 0,\n        offset: 0\n      });\n\n    case SELECTED_DOCTOR:\n      return _objectSpread({}, state, {\n        selected_doctor_id: action.payload.selected_doctor_id,\n        selected_state: \"try\"\n      });\n\n    case SELECTED_DOCTOR_SUCCESS:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, action.payload.data),\n        selected_state: \"success\"\n      });\n\n    case SELECTED_DOCTOR_FAILURE:\n      return _objectSpread({}, state, {\n        selected_state: \"failure\"\n      });\n\n    case DOCTOR_AREA_FILTER_APPLY:\n      return _objectSpread({}, state, {\n        // filter_doctor: action.payload.filter_doctor,\n        // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n        is_filter: _objectSpread({}, state.is_filter, {\n          area: true\n        }),\n        value_filter: _objectSpread({}, state.value_filter, {\n          area: action.payload.value\n        })\n      });\n\n    case DEPARTMENT_FILTER_APPLY:\n      return _objectSpread({}, state, {\n        // filter_doctor: action.payload.filter_doctor,\n        // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n        is_filter: _objectSpread({}, state.is_filter, {\n          department: true\n        }),\n        value_filter: _objectSpread({}, state.value_filter, {\n          department: _objectSpread({}, state.value_filter.department, {\n            depth1: action.payload.value.depth1,\n            depth2: action.payload.value.depth2\n          })\n        })\n      });\n\n    case UNIVERSITIE_FILTER_APPLY:\n      return _objectSpread({}, state, {\n        // filter_doctor: action.payload.filter_doctor,\n        // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n        is_filter: _objectSpread({}, state.is_filter, {\n          universitie: true\n        }),\n        value_filter: _objectSpread({}, state.value_filter, {\n          universitie: action.payload.value\n        })\n      });\n\n    case DOCTOR_FILTER_CLEAR:\n      return _objectSpread({}, state, {\n        // filter_doctor: [],\n        is_filter: {\n          area: false,\n          department: false,\n          universitie: false\n        },\n        offset: state.list_doctor.length\n      });\n\n    case DOCTOR_REVIEW_LIST:\n      return _objectSpread({}, state, {\n        doctor_review_state: \"request\"\n      });\n\n    case DOCTOR_REVIEW_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        doctor_review_list: action.payload.doctor_review_list,\n        doctor_review_state: \"success\"\n      });\n\n    case DOCTOR_REVIEW_LIST_FAILURE:\n      return _objectSpread({}, state, {\n        doctor_review_state: \"failure\"\n      });\n\n    case GET_DOCTOR_ALL_REVIEW:\n      return _objectSpread({}, state, {\n        review_data: action.payload.data\n      });\n\n    case ADD_DOCTOR_PAPERS:\n      return _objectSpread({}, state, {\n        data: _objectSpread({}, state.data, {\n          info: _objectSpread({}, state.data.info, {\n            papers: [].concat(_toConsumableArray(state.data.info.papers), _toConsumableArray(action.payload.papers))\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/doctorinfo.js"],"names":["SET_DOCTOR_LIST","ADD_DOCTOR_LIST","RMV_DOCTOR_LIST","SELECTED_DOCTOR","SELECTED_DOCTOR_SUCCESS","SELECTED_DOCTOR_FAILURE","DOCTOR_AREA_FILTER_APPLY","DEPARTMENT_FILTER_APPLY","UNIVERSITIE_FILTER_APPLY","DOCTOR_FILTER_CLEAR","DOCTOR_REVIEW_LIST","DOCTOR_REVIEW_LIST_SUCCESS","DOCTOR_REVIEW_LIST_FAILURE","GET_DOCTOR_ALL_REVIEW","ADD_DOCTOR_PAPERS","set_kakao_logout","Router","set_loading","message_open","set_message","BASE_URL","API_TIME_OUT","axios","errorExcute","getAPI","id","searchText","score_searchText","key","token","get","params","headers","timeout","getReviewAllAPI","exUrl","getAPIEx","data","getReviewAPI","type","types","loginkey","encodeForm","map","encodeURIComponent","join","post","url","put","initialState","list_doctor","filter_doctor","is_filter","area","department","universitie","value_filter","cnt_doctor","offset","cnt_doctor_filter","selected_doctor_id","selected_state","review_data","doctor_review_list","doctor_review_state","doctor_review_request","review_id","is_selected_doctor","dispatch","getState","jwt_token","kakaoinfo","login","localStorage","getItem","query","is_login","doctorinfo","del","then","response","utilsinfo","msg","this_doctor_data","code","payload","get_doctor_all_review","err","req","doctor_id","extantionsUrl","cb","status","isFilter","filter_logic","list","values","filterData","filter","x","current_hospital_juso_short","indexOf","clinic","depth1","depth2","study_last","area_filter_apply","text","length","filter_doctor_list","filter_doctor_cnt","value","department_filter_apply","param","universitie_filter_apply","set_doctor_list","more","remove_doctor_list","get_doctor_papers","limit","add_doctor_papers","papers","info","get_doctor_wordCloud","selected_doctor","score_medicofact","doctor_papers","doctor_wordCloud","specialty_wordCloud","year_graph","setTimeout","console","log","state","action"],"mappings":"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","sourcesContent":["import {\n    SET_DOCTOR_LIST,\n    ADD_DOCTOR_LIST,\n    RMV_DOCTOR_LIST,\n    SELECTED_DOCTOR,\n    SELECTED_DOCTOR_SUCCESS,\n    SELECTED_DOCTOR_FAILURE,\n    DOCTOR_AREA_FILTER_APPLY,\n    DEPARTMENT_FILTER_APPLY,\n    UNIVERSITIE_FILTER_APPLY,\n    DOCTOR_FILTER_CLEAR,\n    DOCTOR_REVIEW_LIST,\n    DOCTOR_REVIEW_LIST_SUCCESS,\n    DOCTOR_REVIEW_LIST_FAILURE,\n    GET_DOCTOR_ALL_REVIEW,\n    ADD_DOCTOR_PAPERS\n} from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\n\nfunction getAPI(id, searchText, score_searchText, key, token) {\n    return axios.get(`https://${BASE_URL}/doctor/${id}`, {\n        params: {\n            searchText,\n            score_searchText,\n            token\n        },\n        headers: token\n            ? {}\n            : {\n                  // 요청 헤더\n                  \"X-Api-Key\": key\n              },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\n\nfunction getReviewAllAPI(id, exUrl, key, token) {\n    return axios.get(`https://${BASE_URL}/doctor/${id}${exUrl || \"\"}`, {\n        params: { token },\n        headers: token\n            ? {}\n            : {\n                  // 요청 헤더\n                  \"X-Api-Key\": key\n              },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nfunction getAPIEx(id, exUrl, key, data) {\n    return axios.get(`https://${BASE_URL}/doctor/${id}${exUrl || \"\"}`, {\n        params: data,\n        headers: {\n            // 요청 헤더\n            \"X-Api-Key\": key\n        },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nconst getReviewAPI = (type, types, loginkey, token) => {\n    const encodeForm = data => {\n        return Object.keys(data)\n            .map(\n                key =>\n                    encodeURIComponent(key) +\n                    \"=\" +\n                    encodeURIComponent(data[key])\n            )\n            .join(\"&\");\n    };\n    if (type == \"post\") {\n        return axios.post(\n            `https://${BASE_URL}/my/review${types[type].url}`,\n            encodeForm(types[type].data),\n            {\n                params: { token },\n                headers: token\n                    ? {}\n                    : {\n                          // 요청 헤더\n                          \"X-Api-Key\": loginkey\n                      },\n                timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n            }\n        );\n    } else if (type == \"put\")\n        return axios.put(\n            `https://${BASE_URL}/my/review${types[type].url}`,\n            encodeForm(types[type].data),\n            {\n                params: { token },\n                headers: token\n                    ? {}\n                    : {\n                          // 요청 헤더\n                          \"X-Api-Key\": loginkey\n                      },\n                timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n            }\n        );\n    else if (type == \"del\")\n        return axios.delete(`https://${BASE_URL}/my/review${types[type]}`, {\n            params: { token },\n            headers: token\n                ? {}\n                : {\n                      // 요청 헤더\n                      \"X-Api-Key\": loginkey\n                  },\n            timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n        });\n    return axios.get(`https://${BASE_URL}/my/review/doctor/getAll`, {\n        params: { token },\n        headers: token\n            ? {}\n            : {\n                  // 요청 헤더\n                  \"X-Api-Key\": loginkey\n              },\n        timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n    });\n};\nconst initialState = {\n    list_doctor: [],\n    filter_doctor: [],\n    is_filter: { area: false, department: false, universitie: false },\n    value_filter: { area: null, department: null, universitie: null },\n    cnt_doctor: 0,\n    offset: 0,\n    cnt_doctor_filter: 0,\n    selected_doctor_id: 0,\n    data: {},\n    selected_state: \"wait\", // success, failure, wait, try,\n\n    review_data: {},\n    doctor_review_list: [],\n    doctor_review_state: \"stay\"\n};\nexport const doctor_review_request = (\n    type,\n    review_id,\n    data,\n    is_selected_doctor = true\n) => {\n    return (dispatch, getState) => {\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token =\n                getState().kakaoinfo.login.jwt_token ||\n                localStorage.getItem(\"jwt_token\");\n        let token;\n        if (Router.query.token && !getState().kakaoinfo.is_login)\n            token = Router.query.token;\n\n        // set_loading(true)(dispatch, getState);\n        const types = {\n            get: \"/doctor/getAll\",\n            post: {\n                url: `/doctor/${getState().doctorinfo.data.id}`,\n                data: data\n            },\n            put: { url: `/d/${review_id || \"\"}`, data: data },\n            del: `/d/${review_id || \"\"}`\n        };\n        dispatch({ type: DOCTOR_REVIEW_LIST });\n        getReviewAPI(type, types, jwt_token, token)\n            .then(response => {\n                if (type == \"get\") {\n                    if (getState().utilsinfo.msg !== \"\")\n                        message_open()(dispatch, getState);\n                    let this_doctor_data = response.data;\n                    if (!this_doctor_data.code)\n                        dispatch({\n                            type: DOCTOR_REVIEW_LIST_SUCCESS,\n                            payload: {\n                                doctor_review_list: this_doctor_data\n                            }\n                        });\n                    if (is_selected_doctor)\n                        get_doctor_all_review(getState().doctorinfo.data.id)(\n                            dispatch,\n                            getState\n                        );\n                } else if (type == \"post\") {\n                    if (response.data.code === 0) {\n                        set_message(\"소중한 리뷰 감사드립니다!\")(\n                            dispatch,\n                            getState\n                        );\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                    }\n                    doctor_review_request(\"get\")(dispatch, getState);\n                    set_loading(false)(dispatch, getState);\n                } else if (type == \"put\") {\n                    if (response.data.code === 0) {\n                        set_message(\"리뷰가 수정되었습니다!\")(\n                            dispatch,\n                            getState\n                        );\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                    }\n                    doctor_review_request(\"get\")(dispatch, getState);\n                    set_loading(false)(dispatch, getState);\n                } else if (type == \"del\") {\n                    if (response.data.code === 0) {\n                        set_message(\"리뷰가 삭제되었습니다!\")(\n                            dispatch,\n                            getState\n                        );\n                    } else {\n                        set_message(response.data.msg)(dispatch, getState);\n                    }\n                    doctor_review_request(\"get\")(dispatch, getState);\n                    set_loading(false)(dispatch, getState);\n                }\n            })\n            .catch((err, req) => {\n                // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n                dispatch({ type: DOCTOR_REVIEW_LIST_FAILURE });\n                set_loading(false)(dispatch, getState);\n                if (type === \"get\") {\n                    message_open(\"리뷰 가져오기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"post\") {\n                    message_open(\"리뷰 등록하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"del\") {\n                    message_open(\"리뷰 삭제하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n                if (type === \"put\") {\n                    message_open(\"리뷰 수정하기에 실패했습니다.\")(\n                        dispatch,\n                        getState\n                    );\n                }\n            });\n    };\n};\nexport const get_doctor_all_review = doctor_id => {\n    return (dispatch, getState) => {\n        const extantionsUrl = \"/review\";\n\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n        let token;\n        if (Router.query.token && !getState().kakaoinfo.is_login)\n            token = Router.query.token;\n        getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token)\n            .then(response => {\n                // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n                dispatch({\n                    type: GET_DOCTOR_ALL_REVIEW,\n                    payload: { data: response.data }\n                });\n                set_loading(false);\n            })\n            .catch(err => {\n                // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n                if (err.response) {\n                    let cb;\n                    let params;\n\n                    if (err.response === 403)\n                        cb = () => {\n                            set_kakao_logout(jwt_token)(dispatch, getState);\n                        };\n                    errorExcute(err.response.status, params, cb);\n                }\n            });\n    };\n};\nexport const isFilter = is_filter => {\n    if (is_filter.area || is_filter.department || is_filter.universitie) {\n        return true;\n    }\n    return false;\n};\nconst filter_logic = (list, is_filter, values) => {\n    let filterData = [];\n    if (is_filter.area && values.area) {\n        filterData = list.filter(x =>\n            x.current_hospital_juso_short.indexOf(values.area) == 0\n                ? true\n                : false\n        );\n    }\n    if (is_filter.department && values.department) {\n        filterData = list.filter(x =>\n            x.clinic.indexOf(values.department.depth1) == 0 ||\n            x.clinic.indexOf(values.department.depth2) == 0\n                ? true\n                : false\n        );\n    }\n    if (is_filter.universitie && values.universitie) {\n        filterData = list.filter(x =>\n            x.study_last.indexOf(values.universitie) == 0 ? true : false\n        );\n    }\n    return filterData;\n};\nexport function area_filter_apply(text) {\n    return (dispatch, getState) => {\n        if (text.indexOf(\"전체\") == 0) return;\n        const is_filter = getState().doctorinfo.is_filter;\n        const list_doctor =\n            !is_filter.area && !is_filter.department && !is_filter.universitie\n                ? getState().doctorinfo.list_doctor\n                : getState().doctorinfo.filter_doctor;\n\n        if (!list_doctor || list_doctor.length <= 0) return;\n        //\n        const filter_doctor_list = list_doctor.filter(x =>\n            x.current_hospital_juso_short.indexOf(text) == 0 ? true : false\n        );\n        const filter_doctor_cnt = filter_doctor_list.length;\n\n        const filter_doctor = filter_doctor_list;\n        dispatch({\n            type: DOCTOR_AREA_FILTER_APPLY,\n            payload: {\n                filter_doctor: filter_doctor,\n                cnt_doctor_filter: filter_doctor_cnt,\n                value: text\n            }\n        });\n    };\n}\nexport function department_filter_apply(param) {\n    return (dispatch, getState) => {\n        if (\n            (param.depth1 && param.depth1.indexOf(\"전체\") == 0) ||\n            (param.depth2 && param.depth2.indexOf(\"선택\") == 0)\n        )\n            return;\n        const is_filter = getState().doctorinfo.is_filter;\n        const list_doctor =\n            !is_filter.area && !is_filter.department && !is_filter.universitie\n                ? getState().doctorinfo.list_doctor\n                : getState().doctorinfo.filter_doctor;\n\n        if (!list_doctor || list_doctor.length <= 0) return;\n        //\n        const filter_doctor_list = list_doctor.filter(x =>\n            x.clinic.indexOf(param.depth1) == 0 ||\n            x.clinic.indexOf(param.depth2) == 0\n                ? true\n                : false\n        );\n        const filter_doctor_cnt = filter_doctor_list.length;\n\n        const filter_doctor = filter_doctor_list;\n        dispatch({\n            type: DEPARTMENT_FILTER_APPLY,\n            payload: {\n                filter_doctor: filter_doctor,\n                cnt_doctor_filter: filter_doctor_cnt,\n                value: param\n            }\n        });\n    };\n}\nexport function universitie_filter_apply(text) {\n    return (dispatch, getState) => {\n        const is_filter = getState().doctorinfo.is_filter;\n        const list_doctor =\n            !is_filter.area && !is_filter.department && !is_filter.universitie\n                ? getState().doctorinfo.list_doctor\n                : getState().doctorinfo.filter_doctor;\n\n        if (!list_doctor || list_doctor.length <= 0) return;\n        //\n        const filter_doctor_list = list_doctor.filter(x =>\n            x.study_last.indexOf(text) == 0 ? true : false\n        );\n        const filter_doctor_cnt = filter_doctor_list.length;\n\n        const filter_doctor = filter_doctor_list;\n\n        dispatch({\n            type: UNIVERSITIE_FILTER_APPLY,\n            payload: {\n                filter_doctor: filter_doctor,\n                cnt_doctor_filter: filter_doctor_cnt,\n                value: text\n            }\n        });\n    };\n}\n\nexport function set_doctor_list(response, more) {\n    return (dispatch, getState) => {\n        const list_doctor = response.data.list_doctor.list;\n        const cnt_doctor = response.data.list_doctor.cnt_doctor;\n        const is_filter = getState().doctorinfo.is_filter;\n        if (!more) {\n            dispatch({\n                type: SET_DOCTOR_LIST,\n                payload: {\n                    list_doctor: list_doctor,\n                    cnt_doctor: cnt_doctor\n                }\n            });\n        } else {\n            if (isFilter(is_filter)) {\n                const filter_doctor_list = filter_logic(\n                    list_doctor,\n                    is_filter,\n                    getState().doctorinfo.value_filter\n                );\n                dispatch({\n                    type: ADD_DOCTOR_LIST,\n                    payload: {\n                        filter_doctor_list: filter_doctor_list\n                    }\n                });\n            } else {\n                dispatch({\n                    type: ADD_DOCTOR_LIST,\n                    payload: {\n                        list_doctor: list_doctor\n                    }\n                });\n            }\n        }\n    };\n}\nexport function remove_doctor_list() {\n    return (dispatch, getState) => {\n        dispatch({\n            type: RMV_DOCTOR_LIST\n        });\n    };\n}\n\nexport const get_doctor_papers = (doctor_id, searchText) => {\n    return async (dispatch, getState) => {\n        const extantionsUrl = \"/papers\";\n\n        let jwt_token;\n\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n\n        let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n            searchText: searchText,\n            limit: 10\n        });\n\n        return response;\n    };\n};\nexport const add_doctor_papers = (doctor_id, searchText) => {\n    return async (dispatch, getState) => {\n        const extantionsUrl = \"/papers\";\n\n        let jwt_token;\n        let offset = 0;\n\n        let papers = getState().doctorinfo.data.info.papers;\n        offset = papers.length;\n\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n\n        let response;\n        try {\n            response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n                searchText: searchText,\n                limit: 10,\n                offset: offset\n            });\n\n            dispatch({\n                type: ADD_DOCTOR_PAPERS,\n                payload: { papers: response.data }\n            });\n        } catch (err) {\n            if (err.response) {\n                let cb;\n                let params;\n\n                if (err.response.status === 403)\n                    cb = () => {\n                        set_kakao_logout(jwt_token)(dispatch, getState);\n                    };\n            }\n            // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n            set_loading(false)(dispatch, getState);\n        }\n    };\n};\n\nexport const get_doctor_wordCloud = doctor_id => {\n    return async (dispatch, getState) => {\n        const extantionsUrl = \"/wordCloud\";\n\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n        let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token);\n\n        return response;\n    };\n};\n\nexport function selected_doctor(id, score_searchText, searchText, token) {\n    return async (dispatch, getState) => {\n        let jwt_token;\n        if (getState().kakaoinfo.login)\n            jwt_token = getState().kakaoinfo.login.jwt_token;\n        set_loading(true)(dispatch, getState);\n        dispatch({\n            type: SELECTED_DOCTOR,\n            payload: { selected_doctor_id: id }\n        });\n        try {\n            let response = await getAPI(\n                id,\n                searchText,\n                score_searchText,\n                jwt_token,\n                token\n            );\n\n            let doctor_papers;\n            let doctor_wordCloud;\n            let data = response.data;\n\n            if (data.score_medicofact) {\n                doctor_papers = await get_doctor_papers(id, searchText)(\n                    dispatch,\n                    getState\n                );\n            }\n            if (data.score_medicofact) {\n                doctor_wordCloud = await get_doctor_wordCloud(id)(\n                    dispatch,\n                    getState\n                );\n            }\n\n            if (doctor_papers) {\n                data.info.papers = doctor_papers.data;\n            }\n\n            if (doctor_wordCloud) {\n                data.info.specialty_wordCloud =\n                    doctor_wordCloud.data.specialty_wordCloud;\n                data.info.year_graph = doctor_wordCloud.data.year_graph;\n            }\n\n            dispatch({\n                type: SELECTED_DOCTOR_SUCCESS,\n                payload: { data: data }\n            });\n            setTimeout(() => {\n                set_loading(false)(dispatch, getState);\n            }, 1000);\n        } catch (err) {\n            // console.error(SELECTED_DOCTOR_FAILURE, err);\n\n            if (err.response) {\n                let cb;\n                let params;\n                console.log(err.response);\n                if (err.response.status === 403)\n                    cb = () => {\n                        set_kakao_logout(jwt_token)(dispatch, getState);\n                    };\n                else if (err.response.status === 500) {\n                    selected_doctor(id, score_searchText)(dispatch, getState);\n                }\n\n                errorExcute(\n                    err.response.status,\n                    params,\n                    cb\n                )(dispatch, getState);\n            }\n            dispatch({\n                type: SELECTED_DOCTOR_FAILURE\n            });\n            set_loading(false)(dispatch, getState);\n        }\n    };\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_DOCTOR_LIST:\n            return {\n                ...state,\n                list_doctor: action.payload.list_doctor,\n                cnt_doctor: action.payload.cnt_doctor,\n                offset: action.payload.list_doctor.length\n            };\n        case ADD_DOCTOR_LIST:\n            if (action.payload.list_doctor)\n                return {\n                    ...state,\n                    list_doctor: [\n                        ...state.list_doctor,\n                        ...action.payload.list_doctor\n                    ],\n                    offset:\n                        state.list_doctor.length +\n                        action.payload.list_doctor.length\n                };\n            else\n                return {\n                    ...state,\n                    filter_doctor: [\n                        ...state.filter_doctor,\n                        ...action.payload.filter_doctor_list\n                    ],\n                    offset:\n                        state.filter_doctor_list.length +\n                        action.payload.filter_doctor_list.length\n                };\n        case RMV_DOCTOR_LIST:\n            return {\n                ...state,\n                list_doctor: [],\n                cnt_doctor: 0,\n                offset: 0\n            };\n        case SELECTED_DOCTOR:\n            return {\n                ...state,\n                selected_doctor_id: action.payload.selected_doctor_id,\n                selected_state: \"try\"\n            };\n        case SELECTED_DOCTOR_SUCCESS:\n            return {\n                ...state,\n                data: { ...action.payload.data },\n                selected_state: \"success\"\n            };\n        case SELECTED_DOCTOR_FAILURE:\n            return {\n                ...state,\n                selected_state: \"failure\"\n            };\n        case DOCTOR_AREA_FILTER_APPLY:\n            return {\n                ...state,\n                // filter_doctor: action.payload.filter_doctor,\n                // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n                is_filter: {\n                    ...state.is_filter,\n                    area: true\n                },\n                value_filter: {\n                    ...state.value_filter,\n                    area: action.payload.value\n                }\n            };\n        case DEPARTMENT_FILTER_APPLY:\n            return {\n                ...state,\n                // filter_doctor: action.payload.filter_doctor,\n                // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n                is_filter: {\n                    ...state.is_filter,\n                    department: true\n                },\n                value_filter: {\n                    ...state.value_filter,\n                    department: {\n                        ...state.value_filter.department,\n                        depth1: action.payload.value.depth1,\n                        depth2: action.payload.value.depth2\n                    }\n                }\n            };\n        case UNIVERSITIE_FILTER_APPLY:\n            return {\n                ...state,\n                // filter_doctor: action.payload.filter_doctor,\n                // cnt_doctor_filter: action.payload.cnt_doctor_filter,\n                is_filter: {\n                    ...state.is_filter,\n                    universitie: true\n                },\n                value_filter: {\n                    ...state.value_filter,\n                    universitie: action.payload.value\n                }\n            };\n        case DOCTOR_FILTER_CLEAR:\n            return {\n                ...state,\n                // filter_doctor: [],\n                is_filter: {\n                    area: false,\n                    department: false,\n                    universitie: false\n                },\n                offset: state.list_doctor.length\n            };\n        case DOCTOR_REVIEW_LIST:\n            return {\n                ...state,\n                doctor_review_state: \"request\"\n            };\n        case DOCTOR_REVIEW_LIST_SUCCESS:\n            return {\n                ...state,\n                doctor_review_list: action.payload.doctor_review_list,\n                doctor_review_state: \"success\"\n            };\n        case DOCTOR_REVIEW_LIST_FAILURE:\n            return {\n                ...state,\n                doctor_review_state: \"failure\"\n            };\n        case GET_DOCTOR_ALL_REVIEW:\n            return {\n                ...state,\n                review_data: action.payload.data\n            };\n        case ADD_DOCTOR_PAPERS:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    info: {\n                        ...state.data.info,\n                        papers: [\n                            ...state.data.info.papers,\n                            ...action.payload.papers\n                        ]\n                    }\n                }\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}