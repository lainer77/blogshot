{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\"; // import { useDispatch } from \"react-redux\";\n\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { useRouter } from \"next/router\";\n\nfunction useDataOne(tableName, id) {\n  var _useState = useState([]),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var route = useRouter(); //   const dispatch = useDispatch();\n\n  useEffect(function () {\n    setLoading(true);\n    var token = localStorage.getItem(\"rjt\");\n    axios.get(\"http://\".concat(BASE_URL, \"/\").concat(tableName, \"/\").concat(id), {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(function (res) {\n      setData(res.data);\n      setLoading(false); // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    })[\"catch\"](function (error) {\n      console.log(error);\n      setError(error.msg);\n      if (error.response && error.response.data && error.response.data.msg) alert(error.response.data.msg);\n\n      if (error.response.status === 401) {\n        localStorage.removeItem(\"rjt\");\n        route.push(\"/login\", \"/\");\n      }\n\n      setLoading(false);\n    });\n  }, []);\n  return {\n    data: data,\n    loading: loading,\n    error: error\n  };\n}\n\nuseDataOne.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\nexport default useDataOne;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/useDataOne.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","useRouter","useDataOne","tableName","id","data","setData","loading","setLoading","error","setError","route","token","localStorage","getItem","get","timeout","headers","then","res","console","log","msg","response","alert","status","removeItem","push","propTypes","string","isRequired","any"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,EAA/B,EAAmC;AAAA,kBACTT,QAAQ,CAAC,EAAD,CADC;AAAA,MAC1BU,IAD0B;AAAA,MACpBC,OADoB;;AAAA,mBAEHX,QAAQ,CAAC,KAAD,CAFL;AAAA,MAE1BY,OAF0B;AAAA,MAEjBC,UAFiB;;AAAA,mBAGPb,QAAQ,EAHD;AAAA,MAG1Bc,KAH0B;AAAA,MAGnBC,QAHmB;;AAIjC,MAAMC,KAAK,GAAGV,SAAS,EAAvB,CAJiC,CAKjC;;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACdY,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAMI,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;AACAhB,IAAAA,KAAK,CACFiB,GADH,kBACiBhB,QADjB,cAC6BI,SAD7B,cAC0CC,EAD1C,GACgD;AAC5CY,MAAAA,OAAO,EAAEhB,YAAY,GAAG,CADoB;AACjB;AAC3BiB,MAAAA,OAAO,EAAE;AAAE,qBAAaL;AAAf;AAFmC,KADhD,EAKGM,IALH,CAKQ,UAAAC,GAAG,EAAI;AACXb,MAAAA,OAAO,CAACa,GAAG,CAACd,IAAL,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV,CAFW,CAGX;AACD,KATH,WAUS,UAAAC,KAAK,EAAI;AACdW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAC,MAAAA,QAAQ,CAACD,KAAK,CAACa,GAAP,CAAR;AACA,UAAIb,KAAK,CAACc,QAAN,IAAkBd,KAAK,CAACc,QAAN,CAAelB,IAAjC,IAAyCI,KAAK,CAACc,QAAN,CAAelB,IAAf,CAAoBiB,GAAjE,EACEE,KAAK,CAACf,KAAK,CAACc,QAAN,CAAelB,IAAf,CAAoBiB,GAArB,CAAL;;AACF,UAAIb,KAAK,CAACc,QAAN,CAAeE,MAAf,KAA0B,GAA9B,EAAmC;AACjCZ,QAAAA,YAAY,CAACa,UAAb,CAAwB,KAAxB;AACAf,QAAAA,KAAK,CAACgB,IAAN,CAAW,QAAX,EAAqB,GAArB;AACD;;AACDnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KApBH;AAqBD,GAxBQ,EAwBN,EAxBM,CAAT;AA0BA,SAAO;AAAEH,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,OAAO,EAAPA,OAAR;AAAiBE,IAAAA,KAAK,EAALA;AAAjB,GAAP;AACD;;AAEDP,UAAU,CAAC0B,SAAX,GAAuB;AACrBzB,EAAAA,SAAS,EAAEN,SAAS,CAACgC,MAAV,CAAiBC,UADP;AAErB1B,EAAAA,EAAE,EAAEP,SAAS,CAACkC,GAAV,CAAcD;AAFG,CAAvB;AAKA,eAAe5B,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n// import { useDispatch } from \"react-redux\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { useRouter } from \"next/router\";\n\nfunction useDataOne(tableName, id) {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const route = useRouter();\n  //   const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .get(`http://${BASE_URL}/${tableName}/${id}`, {\n        timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n        headers: { \"x-api-key\": token }\n      })\n      .then(res => {\n        setData(res.data);\n        setLoading(false);\n        // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n      })\n      .catch(error => {\n        console.log(error);\n        setError(error.msg);\n        if (error.response && error.response.data && error.response.data.msg)\n          alert(error.response.data.msg);\n        if (error.response.status === 401) {\n          localStorage.removeItem(\"rjt\");\n          route.push(\"/login\", \"/\");\n        }\n        setLoading(false);\n      });\n  }, []);\n\n  return { data, loading, error };\n}\n\nuseDataOne.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n\nexport default useDataOne;\n"]},"metadata":{},"sourceType":"module"}