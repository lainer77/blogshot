{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TAGS_SET_REQUEST, TAGS_SET_SUCCESS, TAGS_SET_FAILURE } from \"../actions/types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { set_loading } from \"./utilsinfo\";\n\nfunction getAPI(requset) {\n  return axios.get(`https://${BASE_URL}/home/${requset}`, {\n    params: {},\n    headers: {\n      // 요청 헤더\n      \"X-Api-Key\": \"my-api-key\"\n    },\n    timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nconst initialState = {\n  tagsByDisease: [],\n  tagsByDepartment: []\n};\nexport const tags_set = () => {\n  return (dispatch, getState) => {\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: TAGS_SET_REQUEST\n    });\n    getAPI(\"tagsByDisease\").then(response1 => {\n      getAPI(\"tagsByDepartment\").then(response2 => {\n        const data = response1.data;\n        const data2 = response2.data;\n        dispatch({\n          type: TAGS_SET_SUCCESS,\n          payload: {\n            items1: data,\n            items2: data2\n          }\n        });\n        set_loading(false)(dispatch, getState);\n      });\n    }).catch(err => {\n      // console.error(TAGS_SET_FAILURE, err);\n      dispatch({\n        type: TAGS_SET_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    });\n  };\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TAGS_SET_SUCCESS:\n      return _objectSpread({}, state, {\n        tagsByDisease: action.payload.items1.map(x => x),\n        tagsByDepartment: action.payload.items2.map(x => x)\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/homeinfo.js"],"names":["TAGS_SET_REQUEST","TAGS_SET_SUCCESS","TAGS_SET_FAILURE","axios","BASE_URL","API_TIME_OUT","set_loading","getAPI","requset","get","params","headers","timeout","initialState","tagsByDisease","tagsByDepartment","tags_set","dispatch","getState","type","then","response1","response2","data","data2","payload","items1","items2","catch","err","state","action","map","x"],"mappings":";;;;;;AAAA,SACIA,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,kBAJP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,SAASC,MAAT,CAAgBC,OAAhB,EAAyB;AACrB,SAAOL,KAAK,CAACM,GAAN,CAAW,WAAUL,QAAS,SAAQI,OAAQ,EAA9C,EAAiD;AACpDE,IAAAA,MAAM,EAAE,EAD4C;AAEpDC,IAAAA,OAAO,EAAE;AACL;AACA,mBAAa;AAFR,KAF2C;AAMpDC,IAAAA,OAAO,EAAEP,YAAY,GAAG,CAN4B,CAM1B;;AAN0B,GAAjD,CAAP;AAQH;;AACD,MAAMQ,YAAY,GAAG;AAAEC,EAAAA,aAAa,EAAE,EAAjB;AAAqBC,EAAAA,gBAAgB,EAAE;AAAvC,CAArB;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC1B,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3BZ,IAAAA,WAAW,CAAC,IAAD,CAAX,CAAkBW,QAAlB,EAA4BC,QAA5B;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEnB;AADD,KAAD,CAAR;AAGAO,IAAAA,MAAM,CAAC,eAAD,CAAN,CACKa,IADL,CACUC,SAAS,IAAI;AACfd,MAAAA,MAAM,CAAC,kBAAD,CAAN,CAA2Ba,IAA3B,CAAgCE,SAAS,IAAI;AACzC,cAAMC,IAAI,GAAGF,SAAS,CAACE,IAAvB;AACA,cAAMC,KAAK,GAAGF,SAAS,CAACC,IAAxB;AACAN,QAAAA,QAAQ,CAAC;AACLE,UAAAA,IAAI,EAAElB,gBADD;AAELwB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,MAAM,EAAEH,IAAV;AAAgBI,YAAAA,MAAM,EAAEH;AAAxB;AAFJ,SAAD,CAAR;AAIAlB,QAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBW,QAAnB,EAA6BC,QAA7B;AACH,OARD;AASH,KAXL,EAYKU,KAZL,CAYWC,GAAG,IAAI;AACV;AACAZ,MAAAA,QAAQ,CAAC;AACLE,QAAAA,IAAI,EAAEjB;AADD,OAAD,CAAR;AAGAI,MAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBW,QAAnB,EAA6BC,QAA7B;AACH,KAlBL;AAmBH,GAxBD;AAyBH,CA1BM;AA2BP,gBAAe,CAACY,KAAK,GAAGjB,YAAT,EAAuBkB,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACZ,IAAf;AACI,SAAKlB,gBAAL;AACI,+BACO6B,KADP;AAEIhB,QAAAA,aAAa,EAAEiB,MAAM,CAACN,OAAP,CAAeC,MAAf,CAAsBM,GAAtB,CAA0BC,CAAC,IAAIA,CAA/B,CAFnB;AAGIlB,QAAAA,gBAAgB,EAAEgB,MAAM,CAACN,OAAP,CAAeE,MAAf,CAAsBK,GAAtB,CAA0BC,CAAC,IAAIA,CAA/B;AAHtB;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD","sourcesContent":["import {\n    TAGS_SET_REQUEST,\n    TAGS_SET_SUCCESS,\n    TAGS_SET_FAILURE\n} from \"../actions/types\";\n\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { set_loading } from \"./utilsinfo\";\n\nfunction getAPI(requset) {\n    return axios.get(`https://${BASE_URL}/home/${requset}`, {\n        params: {},\n        headers: {\n            // 요청 헤더\n            \"X-Api-Key\": \"my-api-key\"\n        },\n        timeout: API_TIME_OUT / 3 // 10초 이내에 응답이 오지 않으면 에러로 간주\n    });\n}\nconst initialState = { tagsByDisease: [], tagsByDepartment: [] };\nexport const tags_set = () => {\n    return (dispatch, getState) => {\n        set_loading(true)(dispatch, getState);\n        dispatch({\n            type: TAGS_SET_REQUEST\n        });\n        getAPI(\"tagsByDisease\")\n            .then(response1 => {\n                getAPI(\"tagsByDepartment\").then(response2 => {\n                    const data = response1.data;\n                    const data2 = response2.data;\n                    dispatch({\n                        type: TAGS_SET_SUCCESS,\n                        payload: { items1: data, items2: data2 }\n                    });\n                    set_loading(false)(dispatch, getState);\n                });\n            })\n            .catch(err => {\n                // console.error(TAGS_SET_FAILURE, err);\n                dispatch({\n                    type: TAGS_SET_FAILURE\n                });\n                set_loading(false)(dispatch, getState);\n            });\n    };\n};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TAGS_SET_SUCCESS:\n            return {\n                ...state,\n                tagsByDisease: action.payload.items1.map(x => x),\n                tagsByDepartment: action.payload.items2.map(x => x)\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}