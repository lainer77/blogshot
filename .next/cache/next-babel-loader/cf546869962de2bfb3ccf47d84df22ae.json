{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_POSTS_LIST } from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\nconst tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nconst initialState = {\n  posts: []\n};\nexport const getPostsList = () => {\n  return async (dispatch, getState) => {\n    const data = await getListAPI();\n    console.log(data);\n    dispatch({\n      type: GET_POSTS_LIST,\n      payload: {\n        data: data\n      }\n    });\n  };\n};\nexport const doctor_review_request = (type, review_id, data, is_selected_doctor = true) => {\n  return (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token || localStorage.getItem(\"jwt_token\");\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token; // set_loading(true)(dispatch, getState);\n\n    const types = {\n      get: \"/doctor/getAll\",\n      post: {\n        url: `/doctor/${getState().doctorinfo.data.id}`,\n        data: data\n      },\n      put: {\n        url: `/d/${review_id || \"\"}`,\n        data: data\n      },\n      del: `/d/${review_id || \"\"}`\n    };\n    dispatch({\n      type: DOCTOR_REVIEW_LIST\n    });\n    getReviewAPI(type, types, jwt_token, token).then(response => {\n      if (type == \"get\") {\n        if (getState().utilsinfo.msg !== \"\") message_open()(dispatch, getState);\n        let this_doctor_data = response.data;\n        if (!this_doctor_data.code) dispatch({\n          type: DOCTOR_REVIEW_LIST_SUCCESS,\n          payload: {\n            doctor_review_list: this_doctor_data\n          }\n        });\n        if (is_selected_doctor) get_doctor_all_review(getState().doctorinfo.data.id)(dispatch, getState);\n      } else if (type == \"post\") {\n        if (response.data.code === 0) {\n          set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"put\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"del\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      }\n    }).catch((err, req) => {\n      // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n      dispatch({\n        type: DOCTOR_REVIEW_LIST_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n\n      if (type === \"get\") {\n        message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"post\") {\n        message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"del\") {\n        message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"put\") {\n        message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n      }\n    });\n  };\n};\nexport const get_doctor_all_review = doctor_id => {\n  return (dispatch, getState) => {\n    const extantionsUrl = \"/review\";\n    let jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token).then(response => {\n      // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n      dispatch({\n        type: GET_DOCTOR_ALL_REVIEW,\n        payload: {\n          data: response.data\n        }\n      });\n      set_loading(false);\n    }).catch(err => {\n      // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n      if (err.response) {\n        let cb;\n        let params;\n        if (err.response === 403) cb = () => {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n        errorExcute(err.response.status, params, cb);\n      }\n    });\n  };\n};\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(list_doctor, is_filter, getState().doctorinfo.value_filter);\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport function remove_doctor_list() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: RMV_DOCTOR_LIST\n    });\n  };\n}\nexport const get_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n    let jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n      searchText: searchText,\n      limit: 10\n    });\n    return response;\n  };\n};\nexport const add_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n    let jwt_token;\n    let offset = 0;\n    let papers = getState().doctorinfo.data.info.papers;\n    offset = papers.length;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    let response;\n\n    try {\n      response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n        searchText: searchText,\n        limit: 10,\n        offset: offset\n      });\n      dispatch({\n        type: ADD_DOCTOR_PAPERS,\n        payload: {\n          papers: response.data\n        }\n      });\n    } catch (err) {\n      if (err.response) {\n        let cb;\n        let params;\n        if (err.response.status === 403) cb = () => {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n      } // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n\n\n      set_loading(false)(dispatch, getState);\n    }\n  };\n};\nexport const get_doctor_wordCloud = doctor_id => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/wordCloud\";\n    let jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token);\n    return response;\n  };\n};\nexport function selected_doctor(id, score_searchText, searchText, token) {\n  return async (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: SELECTED_DOCTOR,\n      payload: {\n        selected_doctor_id: id\n      }\n    });\n\n    try {\n      let response = await getAPI(id, searchText, score_searchText, jwt_token, token);\n      let doctor_papers;\n      let doctor_wordCloud;\n      let data = response.data;\n\n      if (data.score_medicofact) {\n        doctor_papers = await get_doctor_papers(id, searchText)(dispatch, getState);\n      }\n\n      if (data.score_medicofact) {\n        doctor_wordCloud = await get_doctor_wordCloud(id)(dispatch, getState);\n      }\n\n      if (doctor_papers) {\n        data.info.papers = doctor_papers.data;\n      }\n\n      if (doctor_wordCloud) {\n        data.info.specialty_wordCloud = doctor_wordCloud.data.specialty_wordCloud;\n        data.info.year_graph = doctor_wordCloud.data.year_graph;\n      }\n\n      dispatch({\n        type: SELECTED_DOCTOR_SUCCESS,\n        payload: {\n          data: data\n        }\n      });\n      setTimeout(() => {\n        set_loading(false)(dispatch, getState);\n      }, 1000);\n    } catch (err) {\n      // console.error(SELECTED_DOCTOR_FAILURE, err);\n      if (err.response) {\n        let cb;\n        let params;\n        console.log(err.response);\n        if (err.response.status === 403) cb = () => {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };else if (err.response.status === 500) {\n          selected_doctor(id, score_searchText)(dispatch, getState);\n        }\n        errorExcute(err.response.status, params, cb)(dispatch, getState);\n      }\n\n      dispatch({\n        type: SELECTED_DOCTOR_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    }\n  };\n}\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return _objectSpread({}, state, {\n        posts: action.payload.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/postsinfo.js"],"names":["GET_POSTS_LIST","set_kakao_logout","Router","set_loading","message_open","set_message","BASE_URL","API_TIME_OUT","axios","errorExcute","tableName","getListAPI","get","timeout","initialState","posts","getPostsList","dispatch","getState","data","console","log","type","payload","doctor_review_request","review_id","is_selected_doctor","jwt_token","kakaoinfo","login","localStorage","getItem","token","query","is_login","types","post","url","doctorinfo","id","put","del","DOCTOR_REVIEW_LIST","getReviewAPI","then","response","utilsinfo","msg","this_doctor_data","code","DOCTOR_REVIEW_LIST_SUCCESS","doctor_review_list","get_doctor_all_review","catch","err","req","DOCTOR_REVIEW_LIST_FAILURE","doctor_id","extantionsUrl","getReviewAllAPI","GET_DOCTOR_ALL_REVIEW","cb","params","status","set_doctor_list","more","list_doctor","list","cnt_doctor","is_filter","SET_DOCTOR_LIST","isFilter","filter_doctor_list","filter_logic","value_filter","ADD_DOCTOR_LIST","remove_doctor_list","RMV_DOCTOR_LIST","get_doctor_papers","searchText","getAPIEx","limit","add_doctor_papers","offset","papers","info","length","ADD_DOCTOR_PAPERS","get_doctor_wordCloud","selected_doctor","score_searchText","SELECTED_DOCTOR","selected_doctor_id","getAPI","doctor_papers","doctor_wordCloud","score_medicofact","specialty_wordCloud","year_graph","SELECTED_DOCTOR_SUCCESS","setTimeout","SELECTED_DOCTOR_FAILURE","state","action"],"mappings":"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","sourcesContent":["import { GET_POSTS_LIST } from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\n\nconst tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n  });\n}\n\nconst initialState = {\n  posts: []\n};\nexport const getPostsList = () => {\n  return async (dispatch, getState) => {\n    const data = await getListAPI();\n    console.log(data);\n    dispatch({ type: GET_POSTS_LIST, payload: { data: data } });\n  };\n};\nexport const doctor_review_request = (\n  type,\n  review_id,\n  data,\n  is_selected_doctor = true\n) => {\n  return (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token =\n        getState().kakaoinfo.login.jwt_token ||\n        localStorage.getItem(\"jwt_token\");\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login)\n      token = Router.query.token;\n\n    // set_loading(true)(dispatch, getState);\n    const types = {\n      get: \"/doctor/getAll\",\n      post: {\n        url: `/doctor/${getState().doctorinfo.data.id}`,\n        data: data\n      },\n      put: { url: `/d/${review_id || \"\"}`, data: data },\n      del: `/d/${review_id || \"\"}`\n    };\n    dispatch({ type: DOCTOR_REVIEW_LIST });\n    getReviewAPI(type, types, jwt_token, token)\n      .then(response => {\n        if (type == \"get\") {\n          if (getState().utilsinfo.msg !== \"\")\n            message_open()(dispatch, getState);\n          let this_doctor_data = response.data;\n          if (!this_doctor_data.code)\n            dispatch({\n              type: DOCTOR_REVIEW_LIST_SUCCESS,\n              payload: {\n                doctor_review_list: this_doctor_data\n              }\n            });\n          if (is_selected_doctor)\n            get_doctor_all_review(getState().doctorinfo.data.id)(\n              dispatch,\n              getState\n            );\n        } else if (type == \"post\") {\n          if (response.data.code === 0) {\n            set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        } else if (type == \"put\") {\n          if (response.data.code === 0) {\n            set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        } else if (type == \"del\") {\n          if (response.data.code === 0) {\n            set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        }\n      })\n      .catch((err, req) => {\n        // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n        dispatch({ type: DOCTOR_REVIEW_LIST_FAILURE });\n        set_loading(false)(dispatch, getState);\n        if (type === \"get\") {\n          message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"post\") {\n          message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"del\") {\n          message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"put\") {\n          message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n        }\n      });\n  };\n};\nexport const get_doctor_all_review = doctor_id => {\n  return (dispatch, getState) => {\n    const extantionsUrl = \"/review\";\n\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login)\n      token = Router.query.token;\n    getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token)\n      .then(response => {\n        // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n        dispatch({\n          type: GET_DOCTOR_ALL_REVIEW,\n          payload: { data: response.data }\n        });\n        set_loading(false);\n      })\n      .catch(err => {\n        // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n        if (err.response) {\n          let cb;\n          let params;\n\n          if (err.response === 403)\n            cb = () => {\n              set_kakao_logout(jwt_token)(dispatch, getState);\n            };\n          errorExcute(err.response.status, params, cb);\n        }\n      });\n  };\n};\n\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(\n          list_doctor,\n          is_filter,\n          getState().doctorinfo.value_filter\n        );\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport function remove_doctor_list() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: RMV_DOCTOR_LIST\n    });\n  };\n}\n\nexport const get_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n\n    let jwt_token;\n\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n      searchText: searchText,\n      limit: 10\n    });\n\n    return response;\n  };\n};\nexport const add_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n\n    let jwt_token;\n    let offset = 0;\n\n    let papers = getState().doctorinfo.data.info.papers;\n    offset = papers.length;\n\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n\n    let response;\n    try {\n      response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n        searchText: searchText,\n        limit: 10,\n        offset: offset\n      });\n\n      dispatch({\n        type: ADD_DOCTOR_PAPERS,\n        payload: { papers: response.data }\n      });\n    } catch (err) {\n      if (err.response) {\n        let cb;\n        let params;\n\n        if (err.response.status === 403)\n          cb = () => {\n            set_kakao_logout(jwt_token)(dispatch, getState);\n          };\n      }\n      // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n      set_loading(false)(dispatch, getState);\n    }\n  };\n};\n\nexport const get_doctor_wordCloud = doctor_id => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/wordCloud\";\n\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token);\n\n    return response;\n  };\n};\n\nexport function selected_doctor(id, score_searchText, searchText, token) {\n  return async (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: SELECTED_DOCTOR,\n      payload: { selected_doctor_id: id }\n    });\n    try {\n      let response = await getAPI(\n        id,\n        searchText,\n        score_searchText,\n        jwt_token,\n        token\n      );\n\n      let doctor_papers;\n      let doctor_wordCloud;\n      let data = response.data;\n\n      if (data.score_medicofact) {\n        doctor_papers = await get_doctor_papers(id, searchText)(\n          dispatch,\n          getState\n        );\n      }\n      if (data.score_medicofact) {\n        doctor_wordCloud = await get_doctor_wordCloud(id)(dispatch, getState);\n      }\n\n      if (doctor_papers) {\n        data.info.papers = doctor_papers.data;\n      }\n\n      if (doctor_wordCloud) {\n        data.info.specialty_wordCloud =\n          doctor_wordCloud.data.specialty_wordCloud;\n        data.info.year_graph = doctor_wordCloud.data.year_graph;\n      }\n\n      dispatch({\n        type: SELECTED_DOCTOR_SUCCESS,\n        payload: { data: data }\n      });\n      setTimeout(() => {\n        set_loading(false)(dispatch, getState);\n      }, 1000);\n    } catch (err) {\n      // console.error(SELECTED_DOCTOR_FAILURE, err);\n\n      if (err.response) {\n        let cb;\n        let params;\n        console.log(err.response);\n        if (err.response.status === 403)\n          cb = () => {\n            set_kakao_logout(jwt_token)(dispatch, getState);\n          };\n        else if (err.response.status === 500) {\n          selected_doctor(id, score_searchText)(dispatch, getState);\n        }\n\n        errorExcute(err.response.status, params, cb)(dispatch, getState);\n      }\n      dispatch({\n        type: SELECTED_DOCTOR_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    }\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return { ...state, posts: action.payload.data };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}