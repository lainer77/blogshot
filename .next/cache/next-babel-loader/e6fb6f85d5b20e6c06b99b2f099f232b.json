{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_POSTS_LIST } from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\nvar tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(\"http://\".concat(BASE_URL, \"/\").concat(tableName), {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nvar initialState = {\n  posts: []\n};\nexport var getPostsList = function getPostsList() {\n  return function _callee(dispatch, getState) {\n    var data;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getListAPI());\n\n          case 2:\n            data = _context.sent;\n            console.log(data);\n            dispatch({\n              type: GET_POSTS_LIST,\n              payload: {\n                data: data\n              }\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n};\nexport var doctor_review_request = function doctor_review_request(type, review_id, data) {\n  var is_selected_doctor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (dispatch, getState) {\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token || localStorage.getItem(\"jwt_token\");\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token; // set_loading(true)(dispatch, getState);\n\n    var types = {\n      get: \"/doctor/getAll\",\n      post: {\n        url: \"/doctor/\".concat(getState().doctorinfo.data.id),\n        data: data\n      },\n      put: {\n        url: \"/d/\".concat(review_id || \"\"),\n        data: data\n      },\n      del: \"/d/\".concat(review_id || \"\")\n    };\n    dispatch({\n      type: DOCTOR_REVIEW_LIST\n    });\n    getReviewAPI(type, types, jwt_token, token).then(function (response) {\n      if (type == \"get\") {\n        if (getState().utilsinfo.msg !== \"\") message_open()(dispatch, getState);\n        var this_doctor_data = response.data;\n        if (!this_doctor_data.code) dispatch({\n          type: DOCTOR_REVIEW_LIST_SUCCESS,\n          payload: {\n            doctor_review_list: this_doctor_data\n          }\n        });\n        if (is_selected_doctor) get_doctor_all_review(getState().doctorinfo.data.id)(dispatch, getState);\n      } else if (type == \"post\") {\n        if (response.data.code === 0) {\n          set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"put\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      } else if (type == \"del\") {\n        if (response.data.code === 0) {\n          set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n        } else {\n          set_message(response.data.msg)(dispatch, getState);\n        }\n\n        doctor_review_request(\"get\")(dispatch, getState);\n        set_loading(false)(dispatch, getState);\n      }\n    })[\"catch\"](function (err, req) {\n      // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n      dispatch({\n        type: DOCTOR_REVIEW_LIST_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n\n      if (type === \"get\") {\n        message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"post\") {\n        message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"del\") {\n        message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n      }\n\n      if (type === \"put\") {\n        message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n      }\n    });\n  };\n};\nexport var get_doctor_all_review = function get_doctor_all_review(doctor_id) {\n  return function (dispatch, getState) {\n    var extantionsUrl = \"/review\";\n    var jwt_token;\n    if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n    var token;\n    if (Router.query.token && !getState().kakaoinfo.is_login) token = Router.query.token;\n    getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token).then(function (response) {\n      // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n      dispatch({\n        type: GET_DOCTOR_ALL_REVIEW,\n        payload: {\n          data: response.data\n        }\n      });\n      set_loading(false);\n    })[\"catch\"](function (err) {\n      // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n      if (err.response) {\n        var cb;\n        var params;\n        if (err.response === 403) cb = function cb() {\n          set_kakao_logout(jwt_token)(dispatch, getState);\n        };\n        errorExcute(err.response.status, params, cb);\n      }\n    });\n  };\n};\nexport function set_doctor_list(response, more) {\n  return function (dispatch, getState) {\n    var list_doctor = response.data.list_doctor.list;\n    var cnt_doctor = response.data.list_doctor.cnt_doctor;\n    var is_filter = getState().doctorinfo.is_filter;\n\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        var filter_doctor_list = filter_logic(list_doctor, is_filter, getState().doctorinfo.value_filter);\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport function remove_doctor_list() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: RMV_DOCTOR_LIST\n    });\n  };\n}\nexport var get_doctor_papers = function get_doctor_papers(doctor_id, searchText) {\n  return function _callee2(dispatch, getState) {\n    var extantionsUrl, jwt_token, response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            extantionsUrl = \"/papers\";\n            if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n              searchText: searchText,\n              limit: 10\n            }));\n\n          case 4:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n};\nexport var add_doctor_papers = function add_doctor_papers(doctor_id, searchText) {\n  return function _callee3(dispatch, getState) {\n    var extantionsUrl, jwt_token, offset, papers, response, cb, params;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            extantionsUrl = \"/papers\";\n            offset = 0;\n            papers = getState().doctorinfo.data.info.papers;\n            offset = papers.length;\n            if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n            _context3.prev = 5;\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n              searchText: searchText,\n              limit: 10,\n              offset: offset\n            }));\n\n          case 8:\n            response = _context3.sent;\n            dispatch({\n              type: ADD_DOCTOR_PAPERS,\n              payload: {\n                papers: response.data\n              }\n            });\n            _context3.next = 16;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](5);\n\n            if (_context3.t0.response) {\n              if (_context3.t0.response.status === 403) cb = function cb() {\n                set_kakao_logout(jwt_token)(dispatch, getState);\n              };\n            } // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n\n\n            set_loading(false)(dispatch, getState);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[5, 12]]);\n  };\n};\nexport var get_doctor_wordCloud = function get_doctor_wordCloud(doctor_id) {\n  return function _callee4(dispatch, getState) {\n    var extantionsUrl, jwt_token, response;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            extantionsUrl = \"/wordCloud\";\n            if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(getAPIEx(doctor_id, extantionsUrl, jwt_token));\n\n          case 4:\n            response = _context4.sent;\n            return _context4.abrupt(\"return\", response);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  };\n};\nexport function selected_doctor(id, score_searchText, searchText, token) {\n  return function _callee5(dispatch, getState) {\n    var jwt_token, response, doctor_papers, doctor_wordCloud, data, cb, params;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (getState().kakaoinfo.login) jwt_token = getState().kakaoinfo.login.jwt_token;\n            set_loading(true)(dispatch, getState);\n            dispatch({\n              type: SELECTED_DOCTOR,\n              payload: {\n                selected_doctor_id: id\n              }\n            });\n            _context5.prev = 3;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(getAPI(id, searchText, score_searchText, jwt_token, token));\n\n          case 6:\n            response = _context5.sent;\n            data = response.data;\n\n            if (!data.score_medicofact) {\n              _context5.next = 12;\n              break;\n            }\n\n            _context5.next = 11;\n            return _regeneratorRuntime.awrap(get_doctor_papers(id, searchText)(dispatch, getState));\n\n          case 11:\n            doctor_papers = _context5.sent;\n\n          case 12:\n            if (!data.score_medicofact) {\n              _context5.next = 16;\n              break;\n            }\n\n            _context5.next = 15;\n            return _regeneratorRuntime.awrap(get_doctor_wordCloud(id)(dispatch, getState));\n\n          case 15:\n            doctor_wordCloud = _context5.sent;\n\n          case 16:\n            if (doctor_papers) {\n              data.info.papers = doctor_papers.data;\n            }\n\n            if (doctor_wordCloud) {\n              data.info.specialty_wordCloud = doctor_wordCloud.data.specialty_wordCloud;\n              data.info.year_graph = doctor_wordCloud.data.year_graph;\n            }\n\n            dispatch({\n              type: SELECTED_DOCTOR_SUCCESS,\n              payload: {\n                data: data\n              }\n            });\n            setTimeout(function () {\n              set_loading(false)(dispatch, getState);\n            }, 1000);\n            _context5.next = 27;\n            break;\n\n          case 22:\n            _context5.prev = 22;\n            _context5.t0 = _context5[\"catch\"](3);\n\n            // console.error(SELECTED_DOCTOR_FAILURE, err);\n            if (_context5.t0.response) {\n              console.log(_context5.t0.response);\n              if (_context5.t0.response.status === 403) cb = function cb() {\n                set_kakao_logout(jwt_token)(dispatch, getState);\n              };else if (_context5.t0.response.status === 500) {\n                selected_doctor(id, score_searchText)(dispatch, getState);\n              }\n              errorExcute(_context5.t0.response.status, params, cb)(dispatch, getState);\n            }\n\n            dispatch({\n              type: SELECTED_DOCTOR_FAILURE\n            });\n            set_loading(false)(dispatch, getState);\n\n          case 27:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[3, 22]]);\n  };\n}\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return _objectSpread({}, state, {\n        posts: action.payload.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/postsinfo.js"],"names":["GET_POSTS_LIST","set_kakao_logout","Router","set_loading","message_open","set_message","BASE_URL","API_TIME_OUT","axios","errorExcute","tableName","getListAPI","get","timeout","initialState","posts","getPostsList","dispatch","getState","data","console","log","type","payload","doctor_review_request","review_id","is_selected_doctor","jwt_token","kakaoinfo","login","localStorage","getItem","token","query","is_login","types","post","url","doctorinfo","id","put","del","DOCTOR_REVIEW_LIST","getReviewAPI","then","response","utilsinfo","msg","this_doctor_data","code","DOCTOR_REVIEW_LIST_SUCCESS","doctor_review_list","get_doctor_all_review","err","req","DOCTOR_REVIEW_LIST_FAILURE","doctor_id","extantionsUrl","getReviewAllAPI","GET_DOCTOR_ALL_REVIEW","cb","params","status","set_doctor_list","more","list_doctor","list","cnt_doctor","is_filter","SET_DOCTOR_LIST","isFilter","filter_doctor_list","filter_logic","value_filter","ADD_DOCTOR_LIST","remove_doctor_list","RMV_DOCTOR_LIST","get_doctor_papers","searchText","getAPIEx","limit","add_doctor_papers","offset","papers","info","length","ADD_DOCTOR_PAPERS","get_doctor_wordCloud","selected_doctor","score_searchText","SELECTED_DOCTOR","selected_doctor_id","getAPI","score_medicofact","doctor_papers","doctor_wordCloud","specialty_wordCloud","year_graph","SELECTED_DOCTOR_SUCCESS","setTimeout","SELECTED_DOCTOR_FAILURE","state","action"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,aAAvD;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,IAAMC,SAAS,GAAG,OAAlB;;AAEA,SAASC,UAAT,GAAsB;AACpB,SAAOH,KAAK,CAACI,GAAN,kBAAoBN,QAApB,cAAgCI,SAAhC,GAA6C;AAClDG,IAAAA,OAAO,EAAEN,YAAY,GAAG,CAD0B,CACxB;;AADwB,GAA7C,CAAP;AAGD;;AAED,IAAMO,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcP,UAAU,EADxB;;AAAA;AACCQ,YAAAA,IADD;AAELC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAF,YAAAA,QAAQ,CAAC;AAAEK,cAAAA,IAAI,EAAEtB,cAAR;AAAwBuB,cAAAA,OAAO,EAAE;AAAEJ,gBAAAA,IAAI,EAAEA;AAAR;AAAjC,aAAD,CAAR;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAKD,CANM;AAOP,OAAO,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCF,IADmC,EAEnCG,SAFmC,EAGnCN,IAHmC,EAKhC;AAAA,MADHO,kBACG,uEADkB,IAClB;AACH,SAAO,UAACT,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAIS,SAAJ;AACA,QAAIT,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GACPT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAA3B,IACAG,YAAY,CAACC,OAAb,CAAqB,WAArB,CAFF;AAGF,QAAIC,KAAJ;AACA,QAAI9B,MAAM,CAAC+B,KAAP,CAAaD,KAAb,IAAsB,CAACd,QAAQ,GAAGU,SAAX,CAAqBM,QAAhD,EACEF,KAAK,GAAG9B,MAAM,CAAC+B,KAAP,CAAaD,KAArB,CAR2B,CAU7B;;AACA,QAAMG,KAAK,GAAG;AACZvB,MAAAA,GAAG,EAAE,gBADO;AAEZwB,MAAAA,IAAI,EAAE;AACJC,QAAAA,GAAG,oBAAanB,QAAQ,GAAGoB,UAAX,CAAsBnB,IAAtB,CAA2BoB,EAAxC,CADC;AAEJpB,QAAAA,IAAI,EAAEA;AAFF,OAFM;AAMZqB,MAAAA,GAAG,EAAE;AAAEH,QAAAA,GAAG,eAAQZ,SAAS,IAAI,EAArB,CAAL;AAAgCN,QAAAA,IAAI,EAAEA;AAAtC,OANO;AAOZsB,MAAAA,GAAG,eAAQhB,SAAS,IAAI,EAArB;AAPS,KAAd;AASAR,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEoB;AAAR,KAAD,CAAR;AACAC,IAAAA,YAAY,CAACrB,IAAD,EAAOa,KAAP,EAAcR,SAAd,EAAyBK,KAAzB,CAAZ,CACGY,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,UAAIvB,IAAI,IAAI,KAAZ,EAAmB;AACjB,YAAIJ,QAAQ,GAAG4B,SAAX,CAAqBC,GAArB,KAA6B,EAAjC,EACE3C,YAAY,GAAGa,QAAH,EAAaC,QAAb,CAAZ;AACF,YAAI8B,gBAAgB,GAAGH,QAAQ,CAAC1B,IAAhC;AACA,YAAI,CAAC6B,gBAAgB,CAACC,IAAtB,EACEhC,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAE4B,0BADC;AAEP3B,UAAAA,OAAO,EAAE;AACP4B,YAAAA,kBAAkB,EAAEH;AADb;AAFF,SAAD,CAAR;AAMF,YAAItB,kBAAJ,EACE0B,qBAAqB,CAAClC,QAAQ,GAAGoB,UAAX,CAAsBnB,IAAtB,CAA2BoB,EAA5B,CAArB,CACEtB,QADF,EAEEC,QAFF;AAIH,OAhBD,MAgBO,IAAII,IAAI,IAAI,MAAZ,EAAoB;AACzB,YAAIuB,QAAQ,CAAC1B,IAAT,CAAc8B,IAAd,KAAuB,CAA3B,EAA8B;AAC5B5C,UAAAA,WAAW,CAAC,gBAAD,CAAX,CAA8BY,QAA9B,EAAwCC,QAAxC;AACD,SAFD,MAEO;AACLb,UAAAA,WAAW,CAACwC,QAAQ,CAAC1B,IAAT,CAAc4B,GAAf,CAAX,CAA+B9B,QAA/B,EAAyCC,QAAzC;AACD;;AACDM,QAAAA,qBAAqB,CAAC,KAAD,CAArB,CAA6BP,QAA7B,EAAuCC,QAAvC;AACAf,QAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;AACD,OARM,MAQA,IAAII,IAAI,IAAI,KAAZ,EAAmB;AACxB,YAAIuB,QAAQ,CAAC1B,IAAT,CAAc8B,IAAd,KAAuB,CAA3B,EAA8B;AAC5B5C,UAAAA,WAAW,CAAC,cAAD,CAAX,CAA4BY,QAA5B,EAAsCC,QAAtC;AACD,SAFD,MAEO;AACLb,UAAAA,WAAW,CAACwC,QAAQ,CAAC1B,IAAT,CAAc4B,GAAf,CAAX,CAA+B9B,QAA/B,EAAyCC,QAAzC;AACD;;AACDM,QAAAA,qBAAqB,CAAC,KAAD,CAArB,CAA6BP,QAA7B,EAAuCC,QAAvC;AACAf,QAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;AACD,OARM,MAQA,IAAII,IAAI,IAAI,KAAZ,EAAmB;AACxB,YAAIuB,QAAQ,CAAC1B,IAAT,CAAc8B,IAAd,KAAuB,CAA3B,EAA8B;AAC5B5C,UAAAA,WAAW,CAAC,cAAD,CAAX,CAA4BY,QAA5B,EAAsCC,QAAtC;AACD,SAFD,MAEO;AACLb,UAAAA,WAAW,CAACwC,QAAQ,CAAC1B,IAAT,CAAc4B,GAAf,CAAX,CAA+B9B,QAA/B,EAAyCC,QAAzC;AACD;;AACDM,QAAAA,qBAAqB,CAAC,KAAD,CAArB,CAA6BP,QAA7B,EAAuCC,QAAvC;AACAf,QAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;AACD;AACF,KA3CH,WA4CS,UAACmC,GAAD,EAAMC,GAAN,EAAc;AACnB;AACArC,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEiC;AAAR,OAAD,CAAR;AACApD,MAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;;AACA,UAAII,IAAI,KAAK,KAAb,EAAoB;AAClBlB,QAAAA,YAAY,CAAC,kBAAD,CAAZ,CAAiCa,QAAjC,EAA2CC,QAA3C;AACD;;AACD,UAAII,IAAI,KAAK,MAAb,EAAqB;AACnBlB,QAAAA,YAAY,CAAC,kBAAD,CAAZ,CAAiCa,QAAjC,EAA2CC,QAA3C;AACD;;AACD,UAAII,IAAI,KAAK,KAAb,EAAoB;AAClBlB,QAAAA,YAAY,CAAC,kBAAD,CAAZ,CAAiCa,QAAjC,EAA2CC,QAA3C;AACD;;AACD,UAAII,IAAI,KAAK,KAAb,EAAoB;AAClBlB,QAAAA,YAAY,CAAC,kBAAD,CAAZ,CAAiCa,QAAjC,EAA2CC,QAA3C;AACD;AACF,KA5DH;AA6DD,GAlFD;AAmFD,CAzFM;AA0FP,OAAO,IAAMkC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAI,SAAS,EAAI;AAChD,SAAO,UAACvC,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAMuC,aAAa,GAAG,SAAtB;AAEA,QAAI9B,SAAJ;AACA,QAAIT,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GAAGT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAAvC;AACF,QAAIK,KAAJ;AACA,QAAI9B,MAAM,CAAC+B,KAAP,CAAaD,KAAb,IAAsB,CAACd,QAAQ,GAAGU,SAAX,CAAqBM,QAAhD,EACEF,KAAK,GAAG9B,MAAM,CAAC+B,KAAP,CAAaD,KAArB;AACF0B,IAAAA,eAAe,CAACF,SAAD,EAAYC,aAAZ,EAA2B9B,SAA3B,EAAsCK,KAAtC,CAAf,CACGY,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB;AACA5B,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEqC,qBADC;AAEPpC,QAAAA,OAAO,EAAE;AAAEJ,UAAAA,IAAI,EAAE0B,QAAQ,CAAC1B;AAAjB;AAFF,OAAD,CAAR;AAIAhB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KARH,WASS,UAAAkD,GAAG,EAAI;AACZ;AACA,UAAIA,GAAG,CAACR,QAAR,EAAkB;AAChB,YAAIe,EAAJ;AACA,YAAIC,MAAJ;AAEA,YAAIR,GAAG,CAACR,QAAJ,KAAiB,GAArB,EACEe,EAAE,GAAG,cAAM;AACT3D,UAAAA,gBAAgB,CAAC0B,SAAD,CAAhB,CAA4BV,QAA5B,EAAsCC,QAAtC;AACD,SAFD;AAGFT,QAAAA,WAAW,CAAC4C,GAAG,CAACR,QAAJ,CAAaiB,MAAd,EAAsBD,MAAtB,EAA8BD,EAA9B,CAAX;AACD;AACF,KArBH;AAsBD,GA/BD;AAgCD,CAjCM;AAmCP,OAAO,SAASG,eAAT,CAAyBlB,QAAzB,EAAmCmB,IAAnC,EAAyC;AAC9C,SAAO,UAAC/C,QAAD,EAAWC,QAAX,EAAwB;AAC7B,QAAM+C,WAAW,GAAGpB,QAAQ,CAAC1B,IAAT,CAAc8C,WAAd,CAA0BC,IAA9C;AACA,QAAMC,UAAU,GAAGtB,QAAQ,CAAC1B,IAAT,CAAc8C,WAAd,CAA0BE,UAA7C;AACA,QAAMC,SAAS,GAAGlD,QAAQ,GAAGoB,UAAX,CAAsB8B,SAAxC;;AACA,QAAI,CAACJ,IAAL,EAAW;AACT/C,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE+C,eADC;AAEP9C,QAAAA,OAAO,EAAE;AACP0C,UAAAA,WAAW,EAAEA,WADN;AAEPE,UAAAA,UAAU,EAAEA;AAFL;AAFF,OAAD,CAAR;AAOD,KARD,MAQO;AACL,UAAIG,QAAQ,CAACF,SAAD,CAAZ,EAAyB;AACvB,YAAMG,kBAAkB,GAAGC,YAAY,CACrCP,WADqC,EAErCG,SAFqC,EAGrClD,QAAQ,GAAGoB,UAAX,CAAsBmC,YAHe,CAAvC;AAKAxD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEoD,eADC;AAEPnD,UAAAA,OAAO,EAAE;AACPgD,YAAAA,kBAAkB,EAAEA;AADb;AAFF,SAAD,CAAR;AAMD,OAZD,MAYO;AACLtD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEoD,eADC;AAEPnD,UAAAA,OAAO,EAAE;AACP0C,YAAAA,WAAW,EAAEA;AADN;AAFF,SAAD,CAAR;AAMD;AACF;AACF,GAlCD;AAmCD;AACD,OAAO,SAASU,kBAAT,GAA8B;AACnC,SAAO,UAAC1D,QAAD,EAAWC,QAAX,EAAwB;AAC7BD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEsD;AADC,KAAD,CAAR;AAGD,GAJD;AAKD;AAED,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACrB,SAAD,EAAYsB,UAAZ,EAA2B;AAC1D,SAAO,kBAAO7D,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCuC,YAAAA,aADD,GACiB,SADjB;AAKL,gBAAIvC,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GAAGT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAAvC;AANG;AAAA,6CAQgBoD,QAAQ,CAACvB,SAAD,EAAYC,aAAZ,EAA2B9B,SAA3B,EAAsC;AACjEmD,cAAAA,UAAU,EAAEA,UADqD;AAEjEE,cAAAA,KAAK,EAAE;AAF0D,aAAtC,CARxB;;AAAA;AAQDnC,YAAAA,QARC;AAAA,8CAaEA,QAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAeD,CAhBM;AAiBP,OAAO,IAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACzB,SAAD,EAAYsB,UAAZ,EAA2B;AAC1D,SAAO,kBAAO7D,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCuC,YAAAA,aADD,GACiB,SADjB;AAIDyB,YAAAA,MAJC,GAIQ,CAJR;AAMDC,YAAAA,MANC,GAMQjE,QAAQ,GAAGoB,UAAX,CAAsBnB,IAAtB,CAA2BiE,IAA3B,CAAgCD,MANxC;AAOLD,YAAAA,MAAM,GAAGC,MAAM,CAACE,MAAhB;AAEA,gBAAInE,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GAAGT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAAvC;AAVG;AAAA;AAAA,6CAccoD,QAAQ,CAACvB,SAAD,EAAYC,aAAZ,EAA2B9B,SAA3B,EAAsC;AAC7DmD,cAAAA,UAAU,EAAEA,UADiD;AAE7DE,cAAAA,KAAK,EAAE,EAFsD;AAG7DE,cAAAA,MAAM,EAAEA;AAHqD,aAAtC,CAdtB;;AAAA;AAcHrC,YAAAA,QAdG;AAoBH5B,YAAAA,QAAQ,CAAC;AACPK,cAAAA,IAAI,EAAEgE,iBADC;AAEP/D,cAAAA,OAAO,EAAE;AAAE4D,gBAAAA,MAAM,EAAEtC,QAAQ,CAAC1B;AAAnB;AAFF,aAAD,CAAR;AApBG;AAAA;;AAAA;AAAA;AAAA;;AAyBH,gBAAI,aAAI0B,QAAR,EAAkB;AAIhB,kBAAI,aAAIA,QAAJ,CAAaiB,MAAb,KAAwB,GAA5B,EACEF,EAAE,GAAG,cAAM;AACT3D,gBAAAA,gBAAgB,CAAC0B,SAAD,CAAhB,CAA4BV,QAA5B,EAAsCC,QAAtC;AACD,eAFD;AAGH,aAjCE,CAkCH;;;AACAf,YAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;;AAnCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAsCD,CAvCM;AAyCP,OAAO,IAAMqE,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA/B,SAAS,EAAI;AAC/C,SAAO,kBAAOvC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCuC,YAAAA,aADD,GACiB,YADjB;AAIL,gBAAIvC,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GAAGT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAAvC;AALG;AAAA,6CAMgBoD,QAAQ,CAACvB,SAAD,EAAYC,aAAZ,EAA2B9B,SAA3B,CANxB;;AAAA;AAMDkB,YAAAA,QANC;AAAA,8CAQEA,QARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAUD,CAXM;AAaP,OAAO,SAAS2C,eAAT,CAAyBjD,EAAzB,EAA6BkD,gBAA7B,EAA+CX,UAA/C,EAA2D9C,KAA3D,EAAkE;AACvE,SAAO,kBAAOf,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEL,gBAAIA,QAAQ,GAAGU,SAAX,CAAqBC,KAAzB,EACEF,SAAS,GAAGT,QAAQ,GAAGU,SAAX,CAAqBC,KAArB,CAA2BF,SAAvC;AACFxB,YAAAA,WAAW,CAAC,IAAD,CAAX,CAAkBc,QAAlB,EAA4BC,QAA5B;AACAD,YAAAA,QAAQ,CAAC;AACPK,cAAAA,IAAI,EAAEoE,eADC;AAEPnE,cAAAA,OAAO,EAAE;AAAEoE,gBAAAA,kBAAkB,EAAEpD;AAAtB;AAFF,aAAD,CAAR;AALK;AAAA;AAAA,6CAUkBqD,MAAM,CACzBrD,EADyB,EAEzBuC,UAFyB,EAGzBW,gBAHyB,EAIzB9D,SAJyB,EAKzBK,KALyB,CAVxB;;AAAA;AAUCa,YAAAA,QAVD;AAoBC1B,YAAAA,IApBD,GAoBQ0B,QAAQ,CAAC1B,IApBjB;;AAAA,iBAsBCA,IAAI,CAAC0E,gBAtBN;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAuBqBhB,iBAAiB,CAACtC,EAAD,EAAKuC,UAAL,CAAjB,CACpB7D,QADoB,EAEpBC,QAFoB,CAvBrB;;AAAA;AAuBD4E,YAAAA,aAvBC;;AAAA;AAAA,iBA4BC3E,IAAI,CAAC0E,gBA5BN;AAAA;AAAA;AAAA;;AAAA;AAAA,6CA6BwBN,oBAAoB,CAAChD,EAAD,CAApB,CAAyBtB,QAAzB,EAAmCC,QAAnC,CA7BxB;;AAAA;AA6BD6E,YAAAA,gBA7BC;;AAAA;AAgCH,gBAAID,aAAJ,EAAmB;AACjB3E,cAAAA,IAAI,CAACiE,IAAL,CAAUD,MAAV,GAAmBW,aAAa,CAAC3E,IAAjC;AACD;;AAED,gBAAI4E,gBAAJ,EAAsB;AACpB5E,cAAAA,IAAI,CAACiE,IAAL,CAAUY,mBAAV,GACED,gBAAgB,CAAC5E,IAAjB,CAAsB6E,mBADxB;AAEA7E,cAAAA,IAAI,CAACiE,IAAL,CAAUa,UAAV,GAAuBF,gBAAgB,CAAC5E,IAAjB,CAAsB8E,UAA7C;AACD;;AAEDhF,YAAAA,QAAQ,CAAC;AACPK,cAAAA,IAAI,EAAE4E,uBADC;AAEP3E,cAAAA,OAAO,EAAE;AAAEJ,gBAAAA,IAAI,EAAEA;AAAR;AAFF,aAAD,CAAR;AAIAgF,YAAAA,UAAU,CAAC,YAAM;AACfhG,cAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;AACD,aAFS,EAEP,IAFO,CAAV;AA9CG;AAAA;;AAAA;AAAA;AAAA;;AAkDH;AAEA,gBAAI,aAAI2B,QAAR,EAAkB;AAGhBzB,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAIwB,QAAhB;AACA,kBAAI,aAAIA,QAAJ,CAAaiB,MAAb,KAAwB,GAA5B,EACEF,EAAE,GAAG,cAAM;AACT3D,gBAAAA,gBAAgB,CAAC0B,SAAD,CAAhB,CAA4BV,QAA5B,EAAsCC,QAAtC;AACD,eAFD,CADF,KAIK,IAAI,aAAI2B,QAAJ,CAAaiB,MAAb,KAAwB,GAA5B,EAAiC;AACpC0B,gBAAAA,eAAe,CAACjD,EAAD,EAAKkD,gBAAL,CAAf,CAAsCxE,QAAtC,EAAgDC,QAAhD;AACD;AAEDT,cAAAA,WAAW,CAAC,aAAIoC,QAAJ,CAAaiB,MAAd,EAAsBD,MAAtB,EAA8BD,EAA9B,CAAX,CAA6C3C,QAA7C,EAAuDC,QAAvD;AACD;;AACDD,YAAAA,QAAQ,CAAC;AACPK,cAAAA,IAAI,EAAE8E;AADC,aAAD,CAAR;AAGAjG,YAAAA,WAAW,CAAC,KAAD,CAAX,CAAmBc,QAAnB,EAA6BC,QAA7B;;AArEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwED;AAED,gBAAe,YAAkC;AAAA,MAAjCmF,KAAiC,uEAAzBvF,YAAyB;AAAA,MAAXwF,MAAW;;AAC/C,UAAQA,MAAM,CAAChF,IAAf;AACE,SAAKtB,cAAL;AACE,+BAAYqG,KAAZ;AAAmBtF,QAAAA,KAAK,EAAEuF,MAAM,CAAC/E,OAAP,CAAeJ;AAAzC;;AACF;AACE,aAAOkF,KAAP;AAJJ;AAMD,CAPD","sourcesContent":["import { GET_POSTS_LIST } from \"../actions/types\";\nimport { set_kakao_logout } from \"./kakaoinfo\";\nimport Router from \"next/router\";\nimport { set_loading, message_open, set_message } from \"./utilsinfo\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nimport { errorExcute } from \"../logic/errorLogic\";\n\nconst tableName = \"posts\";\n\nfunction getListAPI() {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n  });\n}\n\nconst initialState = {\n  posts: []\n};\nexport const getPostsList = () => {\n  return async (dispatch, getState) => {\n    const data = await getListAPI();\n    console.log(data);\n    dispatch({ type: GET_POSTS_LIST, payload: { data: data } });\n  };\n};\nexport const doctor_review_request = (\n  type,\n  review_id,\n  data,\n  is_selected_doctor = true\n) => {\n  return (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token =\n        getState().kakaoinfo.login.jwt_token ||\n        localStorage.getItem(\"jwt_token\");\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login)\n      token = Router.query.token;\n\n    // set_loading(true)(dispatch, getState);\n    const types = {\n      get: \"/doctor/getAll\",\n      post: {\n        url: `/doctor/${getState().doctorinfo.data.id}`,\n        data: data\n      },\n      put: { url: `/d/${review_id || \"\"}`, data: data },\n      del: `/d/${review_id || \"\"}`\n    };\n    dispatch({ type: DOCTOR_REVIEW_LIST });\n    getReviewAPI(type, types, jwt_token, token)\n      .then(response => {\n        if (type == \"get\") {\n          if (getState().utilsinfo.msg !== \"\")\n            message_open()(dispatch, getState);\n          let this_doctor_data = response.data;\n          if (!this_doctor_data.code)\n            dispatch({\n              type: DOCTOR_REVIEW_LIST_SUCCESS,\n              payload: {\n                doctor_review_list: this_doctor_data\n              }\n            });\n          if (is_selected_doctor)\n            get_doctor_all_review(getState().doctorinfo.data.id)(\n              dispatch,\n              getState\n            );\n        } else if (type == \"post\") {\n          if (response.data.code === 0) {\n            set_message(\"소중한 리뷰 감사드립니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        } else if (type == \"put\") {\n          if (response.data.code === 0) {\n            set_message(\"리뷰가 수정되었습니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        } else if (type == \"del\") {\n          if (response.data.code === 0) {\n            set_message(\"리뷰가 삭제되었습니다!\")(dispatch, getState);\n          } else {\n            set_message(response.data.msg)(dispatch, getState);\n          }\n          doctor_review_request(\"get\")(dispatch, getState);\n          set_loading(false)(dispatch, getState);\n        }\n      })\n      .catch((err, req) => {\n        // console.log(DOCTOR_REVIEW_LIST_FAILURE, err, req);\n        dispatch({ type: DOCTOR_REVIEW_LIST_FAILURE });\n        set_loading(false)(dispatch, getState);\n        if (type === \"get\") {\n          message_open(\"리뷰 가져오기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"post\") {\n          message_open(\"리뷰 등록하기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"del\") {\n          message_open(\"리뷰 삭제하기에 실패했습니다.\")(dispatch, getState);\n        }\n        if (type === \"put\") {\n          message_open(\"리뷰 수정하기에 실패했습니다.\")(dispatch, getState);\n        }\n      });\n  };\n};\nexport const get_doctor_all_review = doctor_id => {\n  return (dispatch, getState) => {\n    const extantionsUrl = \"/review\";\n\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    let token;\n    if (Router.query.token && !getState().kakaoinfo.is_login)\n      token = Router.query.token;\n    getReviewAllAPI(doctor_id, extantionsUrl, jwt_token, token)\n      .then(response => {\n        // console.log(GET_DOCTOR_ALL_REVIEW + \"_SUCCESS\", response);\n        dispatch({\n          type: GET_DOCTOR_ALL_REVIEW,\n          payload: { data: response.data }\n        });\n        set_loading(false);\n      })\n      .catch(err => {\n        // console.error(GET_DOCTOR_ALL_REVIEW + \"_FAILURE\", err);\n        if (err.response) {\n          let cb;\n          let params;\n\n          if (err.response === 403)\n            cb = () => {\n              set_kakao_logout(jwt_token)(dispatch, getState);\n            };\n          errorExcute(err.response.status, params, cb);\n        }\n      });\n  };\n};\n\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(\n          list_doctor,\n          is_filter,\n          getState().doctorinfo.value_filter\n        );\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport function remove_doctor_list() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: RMV_DOCTOR_LIST\n    });\n  };\n}\n\nexport const get_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n\n    let jwt_token;\n\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n      searchText: searchText,\n      limit: 10\n    });\n\n    return response;\n  };\n};\nexport const add_doctor_papers = (doctor_id, searchText) => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/papers\";\n\n    let jwt_token;\n    let offset = 0;\n\n    let papers = getState().doctorinfo.data.info.papers;\n    offset = papers.length;\n\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n\n    let response;\n    try {\n      response = await getAPIEx(doctor_id, extantionsUrl, jwt_token, {\n        searchText: searchText,\n        limit: 10,\n        offset: offset\n      });\n\n      dispatch({\n        type: ADD_DOCTOR_PAPERS,\n        payload: { papers: response.data }\n      });\n    } catch (err) {\n      if (err.response) {\n        let cb;\n        let params;\n\n        if (err.response.status === 403)\n          cb = () => {\n            set_kakao_logout(jwt_token)(dispatch, getState);\n          };\n      }\n      // console.log(ADD_DOCTOR_PAPERS + \"_ERROR\");\n      set_loading(false)(dispatch, getState);\n    }\n  };\n};\n\nexport const get_doctor_wordCloud = doctor_id => {\n  return async (dispatch, getState) => {\n    const extantionsUrl = \"/wordCloud\";\n\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    let response = await getAPIEx(doctor_id, extantionsUrl, jwt_token);\n\n    return response;\n  };\n};\n\nexport function selected_doctor(id, score_searchText, searchText, token) {\n  return async (dispatch, getState) => {\n    let jwt_token;\n    if (getState().kakaoinfo.login)\n      jwt_token = getState().kakaoinfo.login.jwt_token;\n    set_loading(true)(dispatch, getState);\n    dispatch({\n      type: SELECTED_DOCTOR,\n      payload: { selected_doctor_id: id }\n    });\n    try {\n      let response = await getAPI(\n        id,\n        searchText,\n        score_searchText,\n        jwt_token,\n        token\n      );\n\n      let doctor_papers;\n      let doctor_wordCloud;\n      let data = response.data;\n\n      if (data.score_medicofact) {\n        doctor_papers = await get_doctor_papers(id, searchText)(\n          dispatch,\n          getState\n        );\n      }\n      if (data.score_medicofact) {\n        doctor_wordCloud = await get_doctor_wordCloud(id)(dispatch, getState);\n      }\n\n      if (doctor_papers) {\n        data.info.papers = doctor_papers.data;\n      }\n\n      if (doctor_wordCloud) {\n        data.info.specialty_wordCloud =\n          doctor_wordCloud.data.specialty_wordCloud;\n        data.info.year_graph = doctor_wordCloud.data.year_graph;\n      }\n\n      dispatch({\n        type: SELECTED_DOCTOR_SUCCESS,\n        payload: { data: data }\n      });\n      setTimeout(() => {\n        set_loading(false)(dispatch, getState);\n      }, 1000);\n    } catch (err) {\n      // console.error(SELECTED_DOCTOR_FAILURE, err);\n\n      if (err.response) {\n        let cb;\n        let params;\n        console.log(err.response);\n        if (err.response.status === 403)\n          cb = () => {\n            set_kakao_logout(jwt_token)(dispatch, getState);\n          };\n        else if (err.response.status === 500) {\n          selected_doctor(id, score_searchText)(dispatch, getState);\n        }\n\n        errorExcute(err.response.status, params, cb)(dispatch, getState);\n      }\n      dispatch({\n        type: SELECTED_DOCTOR_FAILURE\n      });\n      set_loading(false)(dispatch, getState);\n    }\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return { ...state, posts: action.payload.data };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}