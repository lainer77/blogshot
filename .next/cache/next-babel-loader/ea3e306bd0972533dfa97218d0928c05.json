{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nconst encodeForm = data => {\n  return Object.keys(data).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key])).join(\"&\");\n};\n\nfunction useTistoryBlogs(access_token = \"\") {\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n\n  const absolve = (datas = []) => {\n    if (access_token) {\n      setLoading(true);\n      axios.post(`http://${BASE_URL}/tistory/blogs`, JSON.stringify(datas), {\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n      }).catch(error => {\n        setError(error);\n        return error;\n      }).finally(() => {\n        setLoading(false);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (access_token) {\n      setLoading(true);\n      axios.get(`http://${BASE_URL}/tistory/blogs`, {\n        params: {\n          access_token: access_token\n        },\n        timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n      }).then(res => {\n        console.log(res.data);\n        setData(res.data);\n        setLoading(false);\n        return res;\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n        return error;\n      });\n    }\n  }, [access_token]);\n  return {\n    absolve,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTistoryBlogs.propTypes = {};\nexport default useTistoryBlogs;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/useTistoryBlogs.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","encodeForm","data","Object","keys","map","key","encodeURIComponent","join","useTistoryBlogs","access_token","setData","loading","setLoading","error","setError","absolve","datas","post","JSON","stringify","timeout","catch","finally","get","params","then","res","console","log","propTypes"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;;AAEA,MAAMC,UAAU,GAAGC,IAAI,IAAI;AACzB,SAAOC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EACJG,GADI,CACAC,GAAG,IAAIC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACL,IAAI,CAACI,GAAD,CAAL,CADzD,EAEJE,IAFI,CAEC,GAFD,CAAP;AAGD,CAJD;;AAMA,SAASC,eAAT,CAAyBC,YAAY,GAAG,EAAxC,EAA4C;AAC1C,QAAM;AAAA,OAACR,IAAD;AAAA,OAAOS;AAAP,MAAkBhB,QAAQ,EAAhC;AACA,QAAM;AAAA,OAACiB,OAAD;AAAA,OAAUC;AAAV,MAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACmB,KAAD;AAAA,OAAQC;AAAR,MAAoBpB,QAAQ,EAAlC;;AAEA,QAAMqB,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AAC9B,QAAIP,YAAJ,EAAkB;AAChBG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAf,MAAAA,KAAK,CACFoB,IADH,CACS,UAASnB,QAAS,gBAD3B,EAC4CoB,IAAI,CAACC,SAAL,CAAeH,KAAf,CAD5C,EACmE;AAC/DI,QAAAA,OAAO,EAAErB,YAAY,GAAG,CADuC,CACrC;;AADqC,OADnE,EAIGsB,KAJH,CAISR,KAAK,IAAI;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACA,eAAOA,KAAP;AACD,OAPH,EAQGS,OARH,CAQW,MAAM;AACbV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAVH;AAWD;AACF,GAfD;;AAiBAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,YAAJ,EAAkB;AAChBG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAf,MAAAA,KAAK,CACF0B,GADH,CACQ,UAASzB,QAAS,gBAD1B,EAC2C;AACvC0B,QAAAA,MAAM,EAAE;AAAEf,UAAAA,YAAY,EAAEA;AAAhB,SAD+B;AAEvCW,QAAAA,OAAO,EAAErB,YAAY,GAAG,CAFe,CAEb;;AAFa,OAD3C,EAKG0B,IALH,CAKQC,GAAG,IAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACzB,IAAhB;AACAS,QAAAA,OAAO,CAACgB,GAAG,CAACzB,IAAL,CAAP;AACAW,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,eAAOc,GAAP;AACD,OAVH,EAWGL,KAXH,CAWSR,KAAK,IAAI;AACdC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACAD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA,eAAOC,KAAP;AACD,OAfH;AAgBD;AACF,GApBQ,EAoBN,CAACJ,YAAD,CApBM,CAAT;AAsBA,SAAO;AACLM,IAAAA,OADK;AAELd,IAAAA,IAFK;AAGLU,IAAAA,OAHK;AAILE,IAAAA;AAJK,GAAP;AAMD;;AAEDL,eAAe,CAACqB,SAAhB,GAA4B,EAA5B;AAEA,eAAerB,eAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nconst encodeForm = data => {\n  return Object.keys(data)\n    .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n    .join(\"&\");\n};\n\nfunction useTistoryBlogs(access_token = \"\") {\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const absolve = (datas = []) => {\n    if (access_token) {\n      setLoading(true);\n      axios\n        .post(`http://${BASE_URL}/tistory/blogs`, JSON.stringify(datas), {\n          timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        })\n        .catch(error => {\n          setError(error);\n          return error;\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (access_token) {\n      setLoading(true);\n      axios\n        .get(`http://${BASE_URL}/tistory/blogs`, {\n          params: { access_token: access_token },\n          timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        })\n        .then(res => {\n          console.log(res.data);\n          setData(res.data);\n          setLoading(false);\n          return res;\n        })\n        .catch(error => {\n          setError(error);\n          setLoading(false);\n          return error;\n        });\n    }\n  }, [access_token]);\n\n  return {\n    absolve,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTistoryBlogs.propTypes = {};\n\nexport default useTistoryBlogs;\n"]},"metadata":{},"sourceType":"module"}