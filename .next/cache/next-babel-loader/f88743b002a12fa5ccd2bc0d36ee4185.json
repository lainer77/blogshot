{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_POSTS_LIST, GET_POST_CODE } from \"../actions/types\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\nconst tableName = \"posts\";\n\nfunction getListAPI(params) {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    params: params,\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nfunction getCodeAPI(code) {\n  return axios.get(`http://${BASE_URL}/${tableName}/${code}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n  });\n}\n\nconst initialState = {\n  posts: [],\n  selectedPost: {}\n};\nexport const getPostsList = () => {\n  return (dispatch, getState) => {\n    getListAPI({\n      limit: 30\n    }).then(res => {\n      dispatch({\n        type: GET_POSTS_LIST,\n        payload: {\n          data: res.data\n        }\n      });\n    });\n  };\n};\nexport const getPostCode = code => {\n  return (dispatch, getState) => {\n    getCodeAPI(code).then(res => {\n      dispatch({\n        type: GET_POSTS_LIST,\n        payload: {\n          data: res.data\n        }\n      });\n    });\n  };\n};\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(list_doctor, is_filter, getState().doctorinfo.value_filter);\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return _objectSpread({}, state, {\n        posts: action.payload.data\n      });\n\n    case GET_POST_CODE:\n      return _objectSpread({}, state, {\n        selectedPost: action.payload.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/reducers/postsinfo.js"],"names":["GET_POSTS_LIST","GET_POST_CODE","BASE_URL","API_TIME_OUT","axios","tableName","getListAPI","params","get","timeout","getCodeAPI","code","initialState","posts","selectedPost","getPostsList","dispatch","getState","limit","then","res","type","payload","data","getPostCode","set_doctor_list","response","more","list_doctor","list","cnt_doctor","is_filter","doctorinfo","SET_DOCTOR_LIST","isFilter","filter_doctor_list","filter_logic","value_filter","ADD_DOCTOR_LIST","state","action"],"mappings":"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","sourcesContent":["import { GET_POSTS_LIST, GET_POST_CODE } from \"../actions/types\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport axios from \"axios\";\n\nconst tableName = \"posts\";\n\nfunction getListAPI(params) {\n  return axios.get(`http://${BASE_URL}/${tableName}`, {\n    params: params,\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n  });\n}\nfunction getCodeAPI(code) {\n  return axios.get(`http://${BASE_URL}/${tableName}/${code}`, {\n    timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n  });\n}\n\nconst initialState = {\n  posts: [],\n  selectedPost: {}\n};\nexport const getPostsList = () => {\n  return (dispatch, getState) => {\n    getListAPI({ limit: 30 }).then(res => {\n      dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    });\n  };\n};\nexport const getPostCode = code => {\n  return (dispatch, getState) => {\n    getCodeAPI(code).then(res => {\n      dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    });\n  };\n};\n\nexport function set_doctor_list(response, more) {\n  return (dispatch, getState) => {\n    const list_doctor = response.data.list_doctor.list;\n    const cnt_doctor = response.data.list_doctor.cnt_doctor;\n    const is_filter = getState().doctorinfo.is_filter;\n    if (!more) {\n      dispatch({\n        type: SET_DOCTOR_LIST,\n        payload: {\n          list_doctor: list_doctor,\n          cnt_doctor: cnt_doctor\n        }\n      });\n    } else {\n      if (isFilter(is_filter)) {\n        const filter_doctor_list = filter_logic(\n          list_doctor,\n          is_filter,\n          getState().doctorinfo.value_filter\n        );\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            filter_doctor_list: filter_doctor_list\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_DOCTOR_LIST,\n          payload: {\n            list_doctor: list_doctor\n          }\n        });\n      }\n    }\n  };\n}\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_LIST:\n      return { ...state, posts: action.payload.data };\n    case GET_POST_CODE:\n      return { ...state, selectedPost: action.payload.data };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}