{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction useTAP() {\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n\n  const signUp = (userId = \"\", password = \"\", {\n    success = (response = {}) => {},\n    fail = (error = {}) => {}\n  }) => {\n    setLoading(true);\n    return axios.post(`http://${BASE_URL}/signup`, {\n      json: JSON.stringify({\n        userId,\n        password\n      })\n    }, {\n      timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n    }).then(res => {\n      success(res, () => {\n        setLoading(false);\n      });\n    }).catch(err => {\n      fail(err);\n      setLoading(false);\n    });\n  };\n\n  const login = (userId = \"\", password = \"\", {\n    success = (response = {}) => {},\n    fail = (error = {}) => {}\n  }) => {\n    setLoading(true);\n    return axios.post(`http://${BASE_URL}/login`, {\n      json: JSON.stringify({\n        userId,\n        password\n      })\n    }, {\n      timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n    }).then(res => {\n      success(res, () => {\n        setLoading(false);\n      });\n    }).catch(err => {\n      fail(err);\n      setLoading(false);\n    });\n  };\n\n  const overlap = id => {\n    return axios.get(`http://${BASE_URL}/overlap/${id}`, {\n      timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n\n    });\n  };\n\n  return {\n    signUp,\n    login,\n    overlap,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTAP.propTypes = {};\nexport default useTAP;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/useTAP.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","useTAP","data","setData","loading","setLoading","error","setError","signUp","userId","password","success","response","fail","post","json","JSON","stringify","timeout","then","res","catch","err","login","overlap","id","get","propTypes"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\n\nfunction useTAP() {\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const signUp = (\n    userId = \"\",\n    password = \"\",\n    { success = (response = {}) => {}, fail = (error = {}) => {} }\n  ) => {\n    setLoading(true);\n    return axios\n      .post(\n        `http://${BASE_URL}/signup`,\n        { json: JSON.stringify({ userId, password }) },\n        {\n          timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        }\n      )\n      .then(res => {\n        success(res, () => {\n          setLoading(false);\n        });\n      })\n      .catch(err => {\n        fail(err);\n        setLoading(false);\n      });\n  };\n  const login = (\n    userId = \"\",\n    password = \"\",\n    { success = (response = {}) => {}, fail = (error = {}) => {} }\n  ) => {\n    setLoading(true);\n    return axios\n      .post(\n        `http://${BASE_URL}/login`,\n        { json: JSON.stringify({ userId, password }) },\n        {\n          timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n        }\n      )\n      .then(res => {\n        success(res, () => {\n          setLoading(false);\n        });\n      })\n      .catch(err => {\n        fail(err);\n        setLoading(false);\n      });\n  };\n  const overlap = id => {\n    return axios.get(`http://${BASE_URL}/overlap/${id}`, {\n      timeout: API_TIME_OUT / 2 // 15초 이내에 응답이 오지 않으면 에러로 간주\n    });\n  };\n\n  return {\n    signUp,\n    login,\n    overlap,\n    data,\n    loading,\n    error\n  };\n}\n\nuseTAP.propTypes = {};\n\nexport default useTAP;\n"]},"metadata":{},"sourceType":"module"}