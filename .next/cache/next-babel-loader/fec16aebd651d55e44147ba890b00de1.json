{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\"; // import { useDispatch } from \"react-redux\";\n\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { useRouter } from \"next/router\";\n\nfunction useDataOne(tableName, id) {\n  const {\n    0: data,\n    1: setData\n  } = useState({});\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const route = useRouter(); //   const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios.get(`http://${BASE_URL}/${tableName}/${id}`, {\n      timeout: API_TIME_OUT / 2,\n      // 15초 이내에 응답이 오지 않으면 에러로 간주\n      headers: {\n        \"x-api-key\": token\n      }\n    }).then(res => {\n      setData(res.data);\n      setLoading(false); // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n    }).catch(error => {\n      console.log(error);\n      setError(error.msg);\n      if (error.response && error.response.data && error.response.data.msg) alert(error.response.data.msg);\n\n      if (error.response && error.response.status === 401) {\n        localStorage.removeItem(\"rjt\");\n        route.push(\"/login\", \"/\");\n      } else {\n        route.back();\n      }\n\n      setLoading(false);\n    });\n  }, []);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\nuseDataOne.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\nexport default useDataOne;","map":{"version":3,"sources":["/Users/daehankim/Documents/GitHub/blogshot/useActions/useDataOne.js"],"names":["useState","useEffect","PropTypes","axios","BASE_URL","API_TIME_OUT","useRouter","useDataOne","tableName","id","data","setData","loading","setLoading","error","setError","route","token","localStorage","getItem","get","timeout","headers","then","res","catch","console","log","msg","response","alert","status","removeItem","push","back","propTypes","string","isRequired","any"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,uBAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,EAA/B,EAAmC;AACjC,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACY,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACc,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,EAAlC;AACA,QAAMgB,KAAK,GAAGV,SAAS,EAAvB,CAJiC,CAKjC;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMI,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;AACAhB,IAAAA,KAAK,CACFiB,GADH,CACQ,UAAShB,QAAS,IAAGI,SAAU,IAAGC,EAAG,EAD7C,EACgD;AAC5CY,MAAAA,OAAO,EAAEhB,YAAY,GAAG,CADoB;AACjB;AAC3BiB,MAAAA,OAAO,EAAE;AAAE,qBAAaL;AAAf;AAFmC,KADhD,EAKGM,IALH,CAKQC,GAAG,IAAI;AACXb,MAAAA,OAAO,CAACa,GAAG,CAACd,IAAL,CAAP;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV,CAFW,CAGX;AACD,KATH,EAUGY,KAVH,CAUSX,KAAK,IAAI;AACdY,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ;AACAC,MAAAA,QAAQ,CAACD,KAAK,CAACc,GAAP,CAAR;AACA,UAAId,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAenB,IAAjC,IAAyCI,KAAK,CAACe,QAAN,CAAenB,IAAf,CAAoBkB,GAAjE,EACEE,KAAK,CAAChB,KAAK,CAACe,QAAN,CAAenB,IAAf,CAAoBkB,GAArB,CAAL;;AACF,UAAId,KAAK,CAACe,QAAN,IAAkBf,KAAK,CAACe,QAAN,CAAeE,MAAf,KAA0B,GAAhD,EAAqD;AACnDb,QAAAA,YAAY,CAACc,UAAb,CAAwB,KAAxB;AACAhB,QAAAA,KAAK,CAACiB,IAAN,CAAW,QAAX,EAAqB,GAArB;AACD,OAHD,MAGO;AACLjB,QAAAA,KAAK,CAACkB,IAAN;AACD;;AACDrB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAtBH;AAuBD,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,SAAO;AAAEH,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD;;AAEDP,UAAU,CAAC4B,SAAX,GAAuB;AACrB3B,EAAAA,SAAS,EAAEN,SAAS,CAACkC,MAAV,CAAiBC,UADP;AAErB5B,EAAAA,EAAE,EAAEP,SAAS,CAACoC,GAAV,CAAcD;AAFG,CAAvB;AAKA,eAAe9B,UAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n// import { useDispatch } from \"react-redux\";\nimport { BASE_URL, API_TIME_OUT } from \"../contants/constants\";\nimport { useRouter } from \"next/router\";\n\nfunction useDataOne(tableName, id) {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const route = useRouter();\n  //   const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    const token = localStorage.getItem(\"rjt\");\n    axios\n      .get(`http://${BASE_URL}/${tableName}/${id}`, {\n        timeout: API_TIME_OUT / 2, // 15초 이내에 응답이 오지 않으면 에러로 간주\n        headers: { \"x-api-key\": token }\n      })\n      .then(res => {\n        setData(res.data);\n        setLoading(false);\n        // dispatch({ type: GET_POSTS_LIST, payload: { data: res.data } });\n      })\n      .catch(error => {\n        console.log(error);\n        setError(error.msg);\n        if (error.response && error.response.data && error.response.data.msg)\n          alert(error.response.data.msg);\n        if (error.response && error.response.status === 401) {\n          localStorage.removeItem(\"rjt\");\n          route.push(\"/login\", \"/\");\n        } else {\n          route.back();\n        }\n        setLoading(false);\n      });\n  }, []);\n\n  return { data, loading, error };\n}\n\nuseDataOne.propTypes = {\n  tableName: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n\nexport default useDataOne;\n"]},"metadata":{},"sourceType":"module"}